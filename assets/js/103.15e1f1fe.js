(window.webpackJsonp=window.webpackJsonp||[]).push([[103],{639:function(e,s,r){"use strict";r.r(s);var a=r(42),t=Object(a.a)({},(function(){var e=this,s=e.$createElement,r=e._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"_03-springboot-配置全集"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_03-springboot-配置全集"}},[e._v("#")]),e._v(" 03-SpringBoot 配置全集")]),e._v(" "),r("h2",{attrs:{id:"application-配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#application-配置"}},[e._v("#")]),e._v(" application 配置")]),e._v(" "),r("ul",[r("li",[e._v("spring.application.admin.enabled\n是否启用admin特性，默认为: false")]),e._v(" "),r("li",[e._v("spring.application.admin.jmx-name\n指定admin MBean的名称，默认为: org.springframework.boot:type=Admin,name=SpringApplication")])]),e._v(" "),r("h2",{attrs:{id:"aop-配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#aop-配置"}},[e._v("#")]),e._v(" aop 配置")]),e._v(" "),r("ul",[r("li",[e._v("spring.aop.auto\n是否支持@EnableAspectJAutoProxy，默认为: true")]),e._v(" "),r("li",[e._v("spring.aop.proxy-target-class\ntrue为使用CGLIB代理，false为JDK代理，默认为false")])]),e._v(" "),r("h2",{attrs:{id:"autoconfig-配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#autoconfig-配置"}},[e._v("#")]),e._v(" autoconfig 配置")]),e._v(" "),r("ul",[r("li",[e._v("spring.autoconfigure.exclude\n配置要排除的Auto-configuration classes.")]),e._v(" "),r("li",[e._v("jmx 配置\nspring.jmx.default-domain\n指定JMX domain name.")]),e._v(" "),r("li",[e._v("spring.jmx.enabled\n是否暴露jmx，默认为true")]),e._v(" "),r("li",[e._v("spring.jmx.server\n指定MBeanServer bean name. 默认为: mbeanServer)")])]),e._v(" "),r("h1",{attrs:{id:"内嵌服务器配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#内嵌服务器配置"}},[e._v("#")]),e._v(" 内嵌服务器配置")]),e._v(" "),r("h2",{attrs:{id:"tomcat-配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tomcat-配置"}},[e._v("#")]),e._v(" tomcat 配置")]),e._v(" "),r("ul",[r("li",[e._v("server.tomcat.basedir\n设定Tomcat的base 目录，如果没有指定则使用临时目录.")]),e._v(" "),r("li",[e._v("server.tomcat.access-log-enabled\n是否开启access log ，默认: false)")]),e._v(" "),r("li",[e._v("server.tomcat.access-log-pattern\n设定access logs的格式，默认: common")]),e._v(" "),r("li",[e._v("server.tomcat.accesslog.directory\n设定log的目录，默认: logs")]),e._v(" "),r("li",[e._v("server.tomcat.accesslog.enabled\n是否开启access log，默认: false")]),e._v(" "),r("li",[e._v("server.tomcat.accesslog.pattern\n设定access logs的格式，默认: common")]),e._v(" "),r("li",[e._v("server.tomcat.accesslog.prefix\n设定Log 文件的前缀，默认: access_log")]),e._v(" "),r("li",[e._v("server.tomcat.accesslog.suffix\n设定Log 文件的后缀，默认: .log")]),e._v(" "),r("li",[e._v("server.tomcat.background-processor-delay\n后台线程方法的Delay大小: 30")]),e._v(" "),r("li",[e._v("server.tomcat.internal-proxies\n设定信任的正则表达式，默认:“10.\\d{1,3}.\\d{1,3}.\\d{1,3}| 192.168.\\d{1,3}.\\d{1,3}| 169.254.\\d{1,3}.\\d{1,3}| 127.\\d{1,3}.\\d{1,3}.\\d{1,3}| 172.1[6-9]{1}.\\d{1,3}.\\d{1,3}| 172.2[0-9]{1}.\\d{1,3}.\\d{1,3}|172.3[0-1]{1}.\\d{1,3}.\\d{1,3}”")]),e._v(" "),r("li",[e._v("server.tomcat.max-http-header-size\n设定http header的最小值，默认: 0")]),e._v(" "),r("li",[e._v("server.tomcat.max-threads\n设定tomcat的最大工作线程数，默认为: 0")]),e._v(" "),r("li",[e._v("server.tomcat.port-header\n设定http header使用的，用来覆盖原来port的value.")]),e._v(" "),r("li",[e._v("server.tomcat.protocol-header\n设定Header包含的协议，通常是 X-Forwarded-Proto，如果remoteIpHeader有值，则将设置为RemoteIpValve.")]),e._v(" "),r("li",[e._v("server.tomcat.protocol-header-https-value\n设定使用SSL的header的值，默认https.")]),e._v(" "),r("li",[e._v("server.tomcat.remote-ip-header\n设定remote IP的header，如果remoteIpHeader有值，则设置为RemoteIpValve")]),e._v(" "),r("li",[e._v("server.tomcat.uri-encoding\n设定URI的解码字符集.")])]),e._v(" "),r("h2",{attrs:{id:"undertow-配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#undertow-配置"}},[e._v("#")]),e._v(" undertow 配置")]),e._v(" "),r("ul",[r("li",[e._v("server.undertow.access-log-dir\n设定Undertow access log 的目录，默认: logs")]),e._v(" "),r("li",[e._v("server.undertow.access-log-enabled\n是否开启access log，默认: false")]),e._v(" "),r("li",[e._v("server.undertow.access-log-pattern\n设定access logs的格式，默认: common")]),e._v(" "),r("li",[e._v("server.undertow.accesslog.dir\n设定access log 的目录.")]),e._v(" "),r("li",[e._v("server.undertow.buffer-size\n设定buffer的大小.")]),e._v(" "),r("li",[e._v("server.undertow.buffers-per-region\n设定每个region的buffer数")]),e._v(" "),r("li",[e._v("server.undertow.direct-buffers\n设定堆外内存")]),e._v(" "),r("li",[e._v("server.undertow.io-threads\n设定I/O线程数.")]),e._v(" "),r("li",[e._v("server.undertow.worker-threads\n设定工作线程数")])]),e._v(" "),r("h2",{attrs:{id:"server-通用配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#server-通用配置"}},[e._v("#")]),e._v(" server 通用配置")]),e._v(" "),r("ul",[r("li",[e._v("server.port\n设定http监听端口。"),r("strong",[e._v("此配置项最为常见")]),e._v("。")]),e._v(" "),r("li",[e._v("server.servlet-path\n设定dispatcher servlet的监听路径，默认为: /")]),e._v(" "),r("li",[e._v("server.address\n指定server绑定的地址")]),e._v(" "),r("li",[e._v("server.compression.enabled\n是否开启压缩，默认为false.")]),e._v(" "),r("li",[e._v("server.compression.excluded-user-agents\n指定不压缩的user-agent，多个以逗号分隔，默认值为:text/html,text/xml,text/plain,text/css")]),e._v(" "),r("li",[e._v("server.compression.mime-types\n指定要压缩的MIME type，多个以逗号分隔.")]),e._v(" "),r("li",[e._v("server.compression.min-response-size\n执行压缩的阈值，默认为2048")]),e._v(" "),r("li",[e._v("server.context-parameters.[param name]\n设置servlet context 参数")]),e._v(" "),r("li",[e._v("server.context-path\n设定应用的context-path.")]),e._v(" "),r("li",[e._v("server.display-name\n设定应用的展示名称，默认: application")]),e._v(" "),r("li",[e._v("server.jsp-servlet.class-name\n设定编译JSP用的servlet，默认: org.apache.jasper.servlet.JspServlet)")]),e._v(" "),r("li",[e._v("server.jsp-servlet.init-parameters.[param name]\n设置JSP servlet 初始化参数.")]),e._v(" "),r("li",[e._v("server.jsp-servlet.registered\n设定JSP servlet是否注册到内嵌的servlet容器，默认true")])]),e._v(" "),r("h2",{attrs:{id:"cookie、session配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cookie、session配置"}},[e._v("#")]),e._v(" cookie、session配置")]),e._v(" "),r("ul",[r("li",[e._v("server.session.cookie.comment\n指定session cookie的comment")]),e._v(" "),r("li",[e._v("server.session.cookie.domain\n指定session cookie的domain")]),e._v(" "),r("li",[e._v("server.session.cookie.http-only\n是否开启HttpOnly.")]),e._v(" "),r("li",[e._v("server.session.cookie.max-age\n设定session cookie的最大age.")]),e._v(" "),r("li",[e._v("server.session.cookie.name\n设定Session cookie 的名称.")]),e._v(" "),r("li",[e._v("server.session.cookie.path\n设定session cookie的路径.")]),e._v(" "),r("li",[e._v("server.session.cookie.secure\n设定session cookie的“Secure” flag.")]),e._v(" "),r("li",[e._v("server.session.persistent\n重启时是否持久化session，默认false")]),e._v(" "),r("li",[e._v("server.session.timeout\nsession的超时时间")]),e._v(" "),r("li",[e._v("server.session.tracking-modes\n设定Session的追踪模式(cookie, url, ssl).")])]),e._v(" "),r("h2",{attrs:{id:"ssl配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ssl配置"}},[e._v("#")]),e._v(" ssl配置")]),e._v(" "),r("ul",[r("li",[e._v("server.ssl.ciphers\n是否支持SSL ciphers.")]),e._v(" "),r("li",[e._v("server.ssl.client-auth\n设定client authentication是wanted 还是 needed.")]),e._v(" "),r("li",[e._v("server.ssl.enabled\n是否开启ssl，默认: true")]),e._v(" "),r("li",[e._v("server.ssl.key-alias\n设定key store中key的别名.")]),e._v(" "),r("li",[e._v("server.ssl.key-password\n访问key store中key的密码.")]),e._v(" "),r("li",[e._v("server.ssl.key-store\n设定持有SSL certificate的key store的路径，通常是一个.jks文件.")]),e._v(" "),r("li",[e._v("server.ssl.key-store-password\n设定访问key store的密码.")]),e._v(" "),r("li",[e._v("server.ssl.key-store-provider\n设定key store的提供者.")]),e._v(" "),r("li",[e._v("server.ssl.key-store-type\n设定key store的类型.")]),e._v(" "),r("li",[e._v("server.ssl.protocol\n使用的SSL协议，默认: TLS")]),e._v(" "),r("li",[e._v("server.ssl.trust-store\n持有SSL certificates的Trust store.")]),e._v(" "),r("li",[e._v("server.ssl.trust-store-password\n访问trust store的密码.")]),e._v(" "),r("li",[e._v("server.ssl.trust-store-provider\n设定trust store的提供者.")]),e._v(" "),r("li",[e._v("server.ssl.trust-store-type\n指定trust store的类型.")])]),e._v(" "),r("h1",{attrs:{id:"spring-mvc-配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc-配置"}},[e._v("#")]),e._v(" spring mvc 配置")]),e._v(" "),r("p",[e._v("MVC基础配置")]),e._v(" "),r("ul",[r("li",[e._v("spring.mvc.async.request-timeout\n设定async请求的超时时间，以毫秒为单位，如果没有设置的话，以具体实现的超时时间为准，比如tomcat的servlet3的话是10秒.")]),e._v(" "),r("li",[e._v("spring.mvc.date-format\n设定日期的格式，比如dd/MM/yyyy.")]),e._v(" "),r("li",[e._v("spring.mvc.favicon.enabled\n是否支持favicon.ico，默认为: true")]),e._v(" "),r("li",[e._v("spring.mvc.ignore-default-model-on-redirect\n在重定向时是否忽略默认model的内容，默认为true")]),e._v(" "),r("li",[e._v("spring.mvc.locale\n指定使用的Locale.")]),e._v(" "),r("li",[e._v("spring.mvc.message-codes-resolver-format\n指定message codes的格式化策略(PREFIX_ERROR_CODE,POSTFIX_ERROR_CODE).")]),e._v(" "),r("li",[e._v("spring.mvc.view.prefix\n指定mvc视图的前缀.")]),e._v(" "),r("li",[e._v("spring.mvc.view.suffix\n指定mvc视图的后缀.")])]),e._v(" "),r("h2",{attrs:{id:"messages-配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#messages-配置"}},[e._v("#")]),e._v(" messages 配置")]),e._v(" "),r("ul",[r("li",[e._v("spring.messages.basename\n指定message的basename，多个以逗号分隔，如果不加包名的话，默认从classpath路径开始，默认: messages")]),e._v(" "),r("li",[e._v("spring.messages.cache-seconds\n设定加载的资源文件缓存失效时间，-1的话为永不过期，默认为-1")]),e._v(" "),r("li",[e._v("spring.messages.encoding\n设定Message bundles的编码，默认: UTF-8")])]),e._v(" "),r("h2",{attrs:{id:"resource-配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#resource-配置"}},[e._v("#")]),e._v(" resource 配置")]),e._v(" "),r("ul",[r("li",[e._v("spring.resources.add-mappings\n是否开启默认的资源处理，默认为true")]),e._v(" "),r("li",[e._v("spring.resources.cache-period\n设定资源的缓存时效，以秒为单位.")]),e._v(" "),r("li",[e._v("spring.resources.chain.cache\n是否开启缓存，默认为: true")]),e._v(" "),r("li",[e._v("spring.resources.chain.enabled\n是否开启资源 handling chain，默认为false")]),e._v(" "),r("li",[e._v("spring.resources.chain.html-application-cache\n是否开启h5应用的cache manifest重写，默认为: false")]),e._v(" "),r("li",[e._v("spring.resources.chain.strategy.content.enabled\n是否开启内容版本策略，默认为false")]),e._v(" "),r("li",[e._v("spring.resources.chain.strategy.content.paths\n指定要应用的版本的路径，多个以逗号分隔，默认为:[/**]")]),e._v(" "),r("li",[e._v("spring.resources.chain.strategy.fixed.enabled\n是否开启固定的版本策略，默认为false")]),e._v(" "),r("li",[e._v("spring.resources.chain.strategy.fixed.paths\n指定要应用版本策略的路径，多个以逗号分隔")]),e._v(" "),r("li",[e._v("spring.resources.chain.strategy.fixed.version\n指定版本策略使用的版本号")]),e._v(" "),r("li",[e._v("spring.resources.static-locations\n指定静态资源路径，默认为classpath:[/META-INF/resources/,/resources/, /static/, /public/]以及context:/")])]),e._v(" "),r("h2",{attrs:{id:"multipart-文件上传配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#multipart-文件上传配置"}},[e._v("#")]),e._v(" multipart 文件上传配置")]),e._v(" "),r("ul",[r("li",[e._v("multipart.enabled\n是否开启文件上传支持，默认为true")]),e._v(" "),r("li",[e._v("multipart.file-size-threshold\n设定文件写入磁盘的阈值，单位为MB或KB，默认为0")]),e._v(" "),r("li",[e._v("multipart.location\n指定文件上传路径.")]),e._v(" "),r("li",[e._v("multipart.max-file-size\n指定文件大小最大值，默认1MB")]),e._v(" "),r("li",[e._v("multipart.max-request-size\n指定每次请求的最大值，默认为10MB")])]),e._v(" "),r("h2",{attrs:{id:"http-配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#http-配置"}},[e._v("#")]),e._v(" http 配置")]),e._v(" "),r("ul",[r("li",[e._v("spring.hateoas.apply-to-primary-object-mapper\n设定是否对object mapper也支持HATEOAS，默认为: true")]),e._v(" "),r("li",[e._v("spring.http.converters.preferred-json-mapper\n是否优先使用JSON mapper来转换.")]),e._v(" "),r("li",[e._v("spring.http.encoding.charset\n指定http请求和相应的Charset，默认: UTF-8")]),e._v(" "),r("li",[e._v("spring.http.encoding.enabled\n是否开启http的编码支持，默认为true")]),e._v(" "),r("li",[e._v("spring.http.encoding.force\n是否强制对http请求和响应进行编码，默认为true")])]),e._v(" "),r("h2",{attrs:{id:"json-配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#json-配置"}},[e._v("#")]),e._v(" json 配置")]),e._v(" "),r("ul",[r("li",[e._v("spring.jackson.date-format\n指定日期格式，比如yyyy-MM-dd HH:mm:ss，或者具体的格式化类的全限定名")]),e._v(" "),r("li",[e._v("spring.jackson.deserialization\n是否开启Jackson的反序列化")]),e._v(" "),r("li",[e._v("spring.jackson.generator\n是否开启json的generators.")]),e._v(" "),r("li",[e._v("spring.jackson.joda-date-time-format\n指定Joda date/time的格式，比如yyyy-MM-dd HH:mm:ss). 如果没有配置的话，dateformat会作为backup")]),e._v(" "),r("li",[e._v("spring.jackson.locale\n指定json使用的Locale.")]),e._v(" "),r("li",[e._v("spring.jackson.mapper\n是否开启Jackson通用的特性.")]),e._v(" "),r("li",[e._v("spring.jackson.parser\n是否开启jackson的parser特性.")]),e._v(" "),r("li",[e._v("spring.jackson.property-naming-strategy\n指定PropertyNamingStrategy (CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES)或者指定PropertyNamingStrategy子类的全限定类名.")]),e._v(" "),r("li",[e._v("spring.jackson.serialization\n是否开启jackson的序列化.")]),e._v(" "),r("li",[e._v("spring.jackson.serialization-inclusion\n指定序列化时属性的inclusion方式，具体查看JsonInclude.Include枚举.")]),e._v(" "),r("li",[e._v("spring.jackson.time-zone\n指定日期格式化时区，比如America/Los_Angeles或者GMT+10.")])]),e._v(" "),r("h1",{attrs:{id:"datasource-数据源配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#datasource-数据源配置"}},[e._v("#")]),e._v(" datasource 数据源配置")]),e._v(" "),r("h2",{attrs:{id:"数据源基础配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数据源基础配置"}},[e._v("#")]),e._v(" 数据源基础配置")]),e._v(" "),r("ul",[r("li",[e._v("spring.dao.exceptiontranslation.enabled\n是否开启PersistenceExceptionTranslationPostProcessor，默认为true")]),e._v(" "),r("li",[e._v("spring.datasource.abandon-when-percentage-full\n设定超时被废弃的连接占到多少比例时要被关闭或上报")]),e._v(" "),r("li",[e._v("spring.datasource.allow-pool-suspension\n使用Hikari pool时，是否允许连接池暂停，默认为: false")]),e._v(" "),r("li",[e._v("spring.datasource.alternate-username-allowed\n是否允许替代的用户名.")]),e._v(" "),r("li",[e._v("spring.datasource.auto-commit\n指定updates是否自动提交.")]),e._v(" "),r("li",[e._v("spring.datasource.catalog\n指定默认的catalog.")]),e._v(" "),r("li",[e._v("spring.datasource.commit-on-return\n设置当连接被归还时，是否要提交所有还未完成的事务")]),e._v(" "),r("li",[e._v("spring.datasource.connection-init-sql\n指定连接被创建，再被添加到连接池之前执行的sql.")]),e._v(" "),r("li",[e._v("spring.datasource.connection-init-sqls\n使用DBCP connection pool时，指定初始化时要执行的sql")]),e._v(" "),r("li",[e._v("spring.datasource.connection-properties.[key]\n在使用DBCP connection pool时指定要配置的属性")]),e._v(" "),r("li",[e._v("spring.datasource.connection-test-query\n指定校验连接合法性执行的sql语句")]),e._v(" "),r("li",[e._v("spring.datasource.connection-timeout\n指定连接的超时时间，毫秒单位.")]),e._v(" "),r("li",[e._v("spring.datasource.continue-on-error\n在初始化数据库时，遇到错误是否继续，默认false")]),e._v(" "),r("li",[e._v("spring.datasource.data\n指定Data (DML)脚本")]),e._v(" "),r("li",[e._v("spring.datasource.data-source-class-name\n指定数据源的全限定名.")]),e._v(" "),r("li",[e._v("spring.datasource.data-source-jndi\n指定jndi的地址")]),e._v(" "),r("li",[e._v("spring.datasource.data-source-properties.[key]\n使用Hikari connection pool时，指定要设置的属性")]),e._v(" "),r("li",[e._v("spring.datasource.db-properties\n使用Tomcat connection pool，指定要设置的属性")]),e._v(" "),r("li",[e._v("spring.datasource.default-auto-commit\n是否自动提交.")]),e._v(" "),r("li",[e._v("spring.datasource.default-catalog\n指定连接默认的catalog.")]),e._v(" "),r("li",[e._v("spring.datasource.default-read-only\n是否设置默认连接只读.")]),e._v(" "),r("li",[e._v("spring.datasource.default-transaction-isolation\n"),r("strong",[e._v("指定连接的事务的默认隔离级别")]),e._v(".")]),e._v(" "),r("li",[e._v("spring.datasource.driver-class-name\n指定driver的类名，默认从jdbc url中自动探测.")]),e._v(" "),r("li",[e._v("spring.datasource.fair-queue\n是否采用FIFO返回连接.")]),e._v(" "),r("li",[e._v("spring.datasource.health-check-properties.[key]\n使用Hikari connection pool时，在心跳检查时传递的属性")]),e._v(" "),r("li",[e._v("spring.datasource.idle-timeout\n指定连接多久没被使用时，被设置为空闲，默认为10ms")]),e._v(" "),r("li",[e._v("spring.datasource.ignore-exception-on-pre-load\n当初始化连接池时，是否忽略异常.")]),e._v(" "),r("li",[e._v("spring.datasource.init-sql\n当连接创建时，执行的sql")]),e._v(" "),r("li",[e._v("spring.datasource.initial-size\n指定启动连接池时，初始建立的连接数量")]),e._v(" "),r("li",[e._v("spring.datasource.initialization-fail-fast\n当创建连接池时，没法创建指定最小连接数量是否抛异常")]),e._v(" "),r("li",[e._v("spring.datasource.initialize\n指定初始化数据源，是否用data.sql来初始化，默认: true")]),e._v(" "),r("li",[e._v("spring.datasource.isolate-internal-queries\n指定内部查询是否要被隔离，默认为false")]),e._v(" "),r("li",[e._v("spring.datasource.jdbc-interceptors\n使用Tomcat connection pool时，指定jdbc拦截器，分号分隔")]),e._v(" "),r("li",[e._v("spring.datasource.jdbc-url\n指定JDBC URL.")]),e._v(" "),r("li",[e._v("spring.datasource.jmx-enabled\n是否开启JMX，默认为: false")]),e._v(" "),r("li",[e._v("spring.datasource.jndi-name\n指定jndi的名称.")]),e._v(" "),r("li",[e._v("spring.datasource.leak-detection-threshold\n使用Hikari connection pool时，多少毫秒检测一次连接泄露.")]),e._v(" "),r("li",[e._v("spring.datasource.log-abandoned\n使用DBCP connection pool，是否追踪废弃statement或连接，默认为: false")]),e._v(" "),r("li",[e._v("spring.datasource.log-validation-errors\n当使用Tomcat connection pool是否打印校验错误.")]),e._v(" "),r("li",[e._v("spring.datasource.login-timeout\n指定连接数据库的超时时间.")]),e._v(" "),r("li",[e._v("spring.datasource.max-active\n指定连接池中最大的活跃连接数.")]),e._v(" "),r("li",[e._v("spring.datasource.max-age\n指定连接池中连接的最大年龄")]),e._v(" "),r("li",[e._v("spring.datasource.max-idle\n指定连接池最大的空闲连接数量.")]),e._v(" "),r("li",[e._v("spring.datasource.max-lifetime\n指定连接池中连接的最大生存时间，毫秒单位.")]),e._v(" "),r("li",[e._v("spring.datasource.max-open-prepared-statements\n指定最大的打开的prepared statements数量.")]),e._v(" "),r("li",[e._v("spring.datasource.max-wait\n指定连接池等待连接返回的最大等待时间，毫秒单位.")]),e._v(" "),r("li",[e._v("spring.datasource.maximum-pool-size\n指定连接池最大的连接数，包括使用中的和空闲的连接.")]),e._v(" "),r("li",[e._v("spring.datasource.min-evictable-idle-time-millis\n指定一个空闲连接最少空闲多久后可被清除.")]),e._v(" "),r("li",[e._v("spring.datasource.min-idle\n指定必须保持连接的最小值(For DBCP and Tomcat connection pools)")]),e._v(" "),r("li",[e._v("spring.datasource.minimum-idle\n指定连接维护的最小空闲连接数，当使用HikariCP时指定.")]),e._v(" "),r("li",[e._v("spring.datasource.name\n指定数据源名.")]),e._v(" "),r("li",[e._v("spring.datasource.num-tests-per-eviction-run\n指定运行每个idle object evictor线程时的对象数量")]),e._v(" "),r("li",[e._v("spring.datasource.password\n指定数据库密码.")]),e._v(" "),r("li",[e._v("spring.datasource.platform\n指定schema要使用的Platform(schema-${platform}.sql)，默认为: all")]),e._v(" "),r("li",[e._v("spring.datasource.pool-name\n指定连接池名字.")]),e._v(" "),r("li",[e._v("spring.datasource.pool-prepared-statements\n指定是否池化statements.")]),e._v(" "),r("li",[e._v("spring.datasource.propagate-interrupt-state\n在等待连接时，如果线程被中断，是否传播中断状态.")]),e._v(" "),r("li",[e._v("spring.datasource.read-only\n当使用Hikari connection pool时，是否标记数据源只读")]),e._v(" "),r("li",[e._v("spring.datasource.register-mbeans\n指定Hikari connection pool是否注册JMX MBeans.")]),e._v(" "),r("li",[e._v("spring.datasource.remove-abandoned\n指定当连接超过废弃超时时间时，是否立刻删除该连接.")]),e._v(" "),r("li",[e._v("spring.datasource.remove-abandoned-timeout\n指定连接应该被废弃的时间.")]),e._v(" "),r("li",[e._v("spring.datasource.rollback-on-return\n在归还连接时，是否回滚等待中的事务.")]),e._v(" "),r("li",[e._v("spring.datasource.schema\n指定Schema (DDL)脚本.")]),e._v(" "),r("li",[e._v("spring.datasource.separator\n指定初始化脚本的语句分隔符，默认: ;")]),e._v(" "),r("li",[e._v("spring.datasource.sql-script-encoding\n指定SQL scripts编码.")]),e._v(" "),r("li",[e._v("spring.datasource.suspect-timeout\n指定打印废弃连接前的超时时间.")]),e._v(" "),r("li",[e._v("spring.datasource.test-on-borrow\n当从连接池借用连接时，是否测试该连接.")]),e._v(" "),r("li",[e._v("spring.datasource.test-on-connect\n创建时，是否测试连接")]),e._v(" "),r("li",[e._v("spring.datasource.test-on-return\n在连接归还到连接池时是否测试该连接.")]),e._v(" "),r("li",[e._v("spring.datasource.test-while-idle\n当连接空闲时，是否执行连接测试.")]),e._v(" "),r("li",[e._v("spring.datasource.time-between-eviction-runs-millis\n指定空闲连接检查、废弃连接清理、空闲连接池大小调整之间的操作时间间隔")]),e._v(" "),r("li",[e._v("spring.datasource.transaction-isolation\n指定事务隔离级别，使用Hikari connection pool时指定")]),e._v(" "),r("li",[e._v("spring.datasource.url\n指定JDBC URL.")]),e._v(" "),r("li",[e._v("spring.datasource.use-disposable-connection-facade\n是否对连接进行包装，防止连接关闭之后被使用.")]),e._v(" "),r("li",[e._v("spring.datasource.use-equals\n比较方法名时是否使用String.equals()替换==.")]),e._v(" "),r("li",[e._v("spring.datasource.use-lock\n是否对连接操作加锁")]),e._v(" "),r("li",[e._v("spring.datasource.username\n*"),r("em",[e._v("指定数据库名的用户名")]),e._v(".")]),e._v(" "),r("li",[e._v("spring.datasource.validation-interval\n指定多少ms执行一次连接校验.")]),e._v(" "),r("li",[e._v("spring.datasource.validation-query\n指定获取连接时连接校验的sql查询语句.")]),e._v(" "),r("li",[e._v("spring.datasource.validation-query-timeout\n指定连接校验查询的超时时间.")]),e._v(" "),r("li",[e._v("spring.datasource.validation-timeout\n设定连接校验的超时时间，当使用Hikari connection pool时指定")]),e._v(" "),r("li",[e._v("spring.datasource.validator-class-name\n用来测试查询的validator全限定名.")]),e._v(" "),r("li",[e._v("spring.datasource.xa.data-source-class-name\n指定数据源的全限定名.")]),e._v(" "),r("li",[e._v("spring.datasource.xa.properties\n指定传递给XA data source的属性")])]),e._v(" "),r("h2",{attrs:{id:"jpa-配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#jpa-配置"}},[e._v("#")]),e._v(" JPA 配置")]),e._v(" "),r("ul",[r("li",[e._v("spring.jpa.database\n指定目标数据库.")]),e._v(" "),r("li",[e._v("spring.jpa.database-platform\n指定目标数据库的类型.")]),e._v(" "),r("li",[e._v("spring.jpa.generate-ddl\n是否在启动时初始化schema，默认为false")]),e._v(" "),r("li",[e._v("spring.jpa.hibernate.ddl-auto\n指定DDL mode (none, validate, update, create, create-drop). 当使用内嵌数据库时，默认是create-drop，否则为none.")]),e._v(" "),r("li",[e._v("spring.jpa.hibernate.naming-strategy\n指定命名策略.")]),e._v(" "),r("li",[e._v("spring.jpa.open-in-view\n是否注册OpenEntityManagerInViewInterceptor，绑定JPA EntityManager到请求线程中，默认为: true")]),e._v(" "),r("li",[e._v("spring.jpa.properties\n添加额外的属性到JPA provider.")]),e._v(" "),r("li",[e._v("spring.jpa.show-sql\n是否开启sql的log，默认为: false")])]),e._v(" "),r("h2",{attrs:{id:"h2-设置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#h2-设置"}},[e._v("#")]),e._v(" h2 设置")]),e._v(" "),r("ul",[r("li",[e._v("spring.h2.console.enabled\n是否开启控制台，默认为false")]),e._v(" "),r("li",[e._v("spring.h2.console.path\n指定控制台路径，默认为: /h2-console")])]),e._v(" "),r("h1",{attrs:{id:"cache-缓存配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cache-缓存配置"}},[e._v("#")]),e._v(" cache 缓存配置")]),e._v(" "),r("h2",{attrs:{id:"缓存通用配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#缓存通用配置"}},[e._v("#")]),e._v(" 缓存通用配置")]),e._v(" "),r("p",[e._v("spring.cache.cache-names\n指定要创建的缓存的名称，逗号分隔(若该缓存实现支持的话)")]),e._v(" "),r("p",[e._v("spring.cache.ehcache.config\n指定初始化EhCache时使用的配置文件的位置指定.")]),e._v(" "),r("p",[e._v("spring.cache.guava.spec\n指定创建缓存要使用的spec，具体详见CacheBuilderSpec.")]),e._v(" "),r("p",[e._v("spring.cache.hazelcast.config\n指定初始化Hazelcast时的配置文件位置")]),e._v(" "),r("p",[e._v("spring.cache.infinispan.config\n指定初始化Infinispan时的配置文件位置.")]),e._v(" "),r("p",[e._v("spring.cache.jcache.config\n指定jcache的配置文件.")]),e._v(" "),r("p",[e._v("spring.cache.jcache.provider\n指定CachingProvider实现类的全限定名.")]),e._v(" "),r("p",[e._v("spring.cache.type\n指定缓存类型")]),e._v(" "),r("h2",{attrs:{id:"redis-配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#redis-配置"}},[e._v("#")]),e._v(" redis 配置")]),e._v(" "),r("p",[e._v("spring.redis.database\n指定连接工厂使用的Database index，默认为: 0")]),e._v(" "),r("p",[e._v("spring.redis.host\n指定Redis server host，默认为: localhost")]),e._v(" "),r("p",[e._v("spring.redis.password\n指定Redis server的密码")]),e._v(" "),r("p",[e._v("spring.redis.pool.max-active\n指定连接池最大的活跃连接数，-1表示无限，默认为8")]),e._v(" "),r("p",[e._v("spring.redis.pool.max-idle\n指定连接池最大的空闲连接数，-1表示无限，默认为8")]),e._v(" "),r("p",[e._v("spring.redis.pool.max-wait\n指定当连接池耗尽时，新获取连接需要等待的最大时间，以毫秒单位，-1表示无限等待")]),e._v(" "),r("p",[e._v("spring.redis.pool.min-idle\n指定连接池中空闲连接的最小数量，默认为0")]),e._v(" "),r("p",[e._v("spring.redis.port\n指定redis服务端端口，默认: 6379")]),e._v(" "),r("p",[e._v("spring.redis.sentinel.master\n指定redis server的名称")]),e._v(" "),r("p",[e._v("spring.redis.sentinel.nodes\n指定sentinel节点，逗号分隔，格式为host:port.")]),e._v(" "),r("p",[e._v("spring.redis.timeout\n指定连接超时时间，毫秒单位，默认为0")]),e._v(" "),r("h1",{attrs:{id:"springdata-nosql-配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#springdata-nosql-配置"}},[e._v("#")]),e._v(" springdata NOSQL 配置")]),e._v(" "),r("h2",{attrs:{id:"elasticsearch-配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#elasticsearch-配置"}},[e._v("#")]),e._v(" elasticsearch 配置")]),e._v(" "),r("p",[e._v("spring.data.elasticsearch.cluster-name\n指定es集群名称，默认: elasticsearch")]),e._v(" "),r("p",[e._v("spring.data.elasticsearch.cluster-nodes\n指定es的集群，逗号分隔，不指定的话，则启动client node.")]),e._v(" "),r("p",[e._v("spring.data.elasticsearch.properties\n指定要配置的es属性.")]),e._v(" "),r("p",[e._v("spring.data.elasticsearch.repositories.enabled\n是否开启es存储，默认为: true")]),e._v(" "),r("p",[e._v("spring.data.jpa.repositories.enabled\n是否开启JPA支持，默认为: true")]),e._v(" "),r("h2",{attrs:{id:"mongodb-配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mongodb-配置"}},[e._v("#")]),e._v(" mongodb 配置")]),e._v(" "),r("p",[e._v("spring.mongodb.embedded.features\n指定要开启的特性，逗号分隔.")]),e._v(" "),r("p",[e._v("spring.mongodb.embedded.version\n指定要使用的版本，默认: 2.6.10")]),e._v(" "),r("p",[e._v("spring.data.mongodb.authentication-database\n指定鉴权的数据库名")]),e._v(" "),r("p",[e._v("spring.data.mongodb.database\n指定mongodb数据库名")]),e._v(" "),r("p",[e._v("spring.data.mongodb.field-naming-strategy\n指定要使用的FieldNamingStrategy.")]),e._v(" "),r("p",[e._v("spring.data.mongodb.grid-fs-database\n指定GridFS database的名称.")]),e._v(" "),r("p",[e._v("spring.data.mongodb.host\n指定Mongo server host.")]),e._v(" "),r("p",[e._v("spring.data.mongodb.password\n指定Mongo server的密码.")]),e._v(" "),r("p",[e._v("spring.data.mongodb.port\n指定Mongo server port.")]),e._v(" "),r("p",[e._v("spring.data.mongodb.repositories.enabled\n是否开启mongodb存储，默认为true")]),e._v(" "),r("p",[e._v("spring.data.mongodb.uri\n指定Mongo database URI.默认:mongodb://localhost/test")]),e._v(" "),r("p",[e._v("spring.data.mongodb.username\n指定登陆mongodb的用户名.")]),e._v(" "),r("h2",{attrs:{id:"restful配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#restful配置"}},[e._v("#")]),e._v(" RESTful配置")]),e._v(" "),r("p",[e._v("spring.data.rest.base-path\n指定暴露资源的基准路径.")]),e._v(" "),r("p",[e._v("spring.data.rest.default-page-size\n指定每页的大小，默认为: 20")]),e._v(" "),r("p",[e._v("spring.data.rest.limit-param-name\n指定limit的参数名，默认为: size")]),e._v(" "),r("p",[e._v("spring.data.rest.max-page-size\n指定最大的页数，默认为1000")]),e._v(" "),r("p",[e._v("spring.data.rest.page-param-name\n指定分页的参数名，默认为: page")]),e._v(" "),r("p",[e._v("spring.data.rest.return-body-on-create\n当创建完实体之后，是否返回body，默认为false")]),e._v(" "),r("p",[e._v("spring.data.rest.return-body-on-update\n在更新完实体后，是否返回body，默认为false")]),e._v(" "),r("p",[e._v("spring.data.rest.sort-param-name\n指定排序使用的key，默认为: sort")]),e._v(" "),r("h2",{attrs:{id:"solr配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#solr配置"}},[e._v("#")]),e._v(" solr配置")]),e._v(" "),r("p",[e._v("spring.data.solr.host\n指定Solr host，如果有指定了zk的host的话，则忽略。默认为: http://127.0.0.1:8983/solr")]),e._v(" "),r("p",[e._v("spring.data.solr.repositories.enabled\n是否开启Solr repositories，默认为: true")]),e._v(" "),r("p",[e._v("spring.data.solr.zk-host\n指定zk的地址，格式为HOST:PORT.")]),e._v(" "),r("h1",{attrs:{id:"spring-security-配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-security-配置"}},[e._v("#")]),e._v(" spring security 配置")]),e._v(" "),r("p",[e._v("spring security是springboot支持的权限控制系统。")]),e._v(" "),r("p",[e._v("security.basic.authorize-mode\n要使用权限控制模式.")]),e._v(" "),r("p",[e._v("security.basic.enabled\n是否开启基本的鉴权，默认为true")]),e._v(" "),r("p",[e._v("security.basic.path\n需要鉴权的path，多个的话以逗号分隔，默认为[/**]")]),e._v(" "),r("p",[e._v("security.basic.realm\nHTTP basic realm 的名字，默认为Spring")]),e._v(" "),r("p",[e._v("security.enable-csrf\n是否开启cross-site request forgery校验，默认为false.")]),e._v(" "),r("p",[e._v("security.filter-order\nSecurity filter chain的order，默认为0")]),e._v(" "),r("p",[e._v("security.headers.cache\n是否开启http头部的cache控制，默认为false.")]),e._v(" "),r("p",[e._v("security.headers.content-type\n是否开启X-Content-Type-Options头部，默认为false.")]),e._v(" "),r("p",[e._v("security.headers.frame\n是否开启X-Frame-Options头部，默认为false.")]),e._v(" "),r("p",[e._v("security.headers.hsts\n指定HTTP Strict Transport Security (HSTS)模式(none, domain, all).")]),e._v(" "),r("p",[e._v("security.headers.xss\n是否开启cross-site scripting (XSS) 保护，默认为false.")]),e._v(" "),r("p",[e._v("security.ignored\n指定不鉴权的路径，多个的话以逗号分隔.")]),e._v(" "),r("p",[e._v("security.oauth2.client.access-token-uri\n指定获取access token的URI.")]),e._v(" "),r("p",[e._v("security.oauth2.client.access-token-validity-seconds\n指定access token失效时长.")]),e._v(" "),r("p",[e._v("security.oauth2.client.additional-information.[key]\n设定要添加的额外信息.")]),e._v(" "),r("p",[e._v("security.oauth2.client.authentication-scheme\n指定传输不记名令牌(bearer token)的方式(form, header, none,query)，默认为header")]),e._v(" "),r("p",[e._v("security.oauth2.client.authorities\n指定授予客户端的权限.")]),e._v(" "),r("p",[e._v("security.oauth2.client.authorized-grant-types\n指定客户端允许的grant types.")]),e._v(" "),r("p",[e._v("security.oauth2.client.auto-approve-scopes\n对客户端自动授权的scope.")]),e._v(" "),r("p",[e._v("security.oauth2.client.client-authentication-scheme\n传输authentication credentials的方式(form, header, none, query)，默认为header方式")]),e._v(" "),r("p",[e._v("security.oauth2.client.client-id\n指定OAuth2 client ID.")]),e._v(" "),r("p",[e._v("security.oauth2.client.client-secret\n指定OAuth2 client secret. 默认是一个随机的secret.")]),e._v(" "),r("p",[e._v("security.oauth2.client.grant-type\n指定获取资源的access token的授权类型.")]),e._v(" "),r("p",[e._v("security.oauth2.client.id\n指定应用的client ID.")]),e._v(" "),r("p",[e._v("security.oauth2.client.pre-established-redirect-uri\n服务端pre-established的跳转URI.")]),e._v(" "),r("p",[e._v("security.oauth2.client.refresh-token-validity-seconds\n指定refresh token的有效期.")]),e._v(" "),r("p",[e._v("security.oauth2.client.registered-redirect-uri\n指定客户端跳转URI，多个以逗号分隔.")]),e._v(" "),r("p",[e._v("security.oauth2.client.resource-ids\n指定客户端相关的资源id，多个以逗号分隔.")]),e._v(" "),r("p",[e._v("security.oauth2.client.scope\nclient的scope")]),e._v(" "),r("p",[e._v("security.oauth2.client.token-name\n指定token的名称")]),e._v(" "),r("p",[e._v("security.oauth2.client.use-current-uri\n是否优先使用请求中URI，再使用pre-established的跳转URI. 默认为true")]),e._v(" "),r("p",[e._v("security.oauth2.client.user-authorization-uri\n用户跳转去获取access token的URI.")]),e._v(" "),r("p",[e._v("security.oauth2.resource.id\n指定resource的唯一标识.")]),e._v(" "),r("p",[e._v("security.oauth2.resource.jwt.key-uri\nJWT token的URI. 当key为公钥时，或者value不指定时指定.")]),e._v(" "),r("p",[e._v("security.oauth2.resource.jwt.key-value\nJWT token验证的value. 可以是对称加密或者PEMencoded RSA公钥. 可以使用URI作为value.")]),e._v(" "),r("p",[e._v("security.oauth2.resource.prefer-token-info\n是否使用token info，默认为true")]),e._v(" "),r("p",[e._v("security.oauth2.resource.service-id\n指定service ID，默认为resource.")]),e._v(" "),r("p",[e._v("security.oauth2.resource.token-info-uri\ntoken解码的URI.")]),e._v(" "),r("p",[e._v("security.oauth2.resource.token-type\n指定当使用userInfoUri时，发送的token类型.")]),e._v(" "),r("p",[e._v("security.oauth2.resource.user-info-uri\n指定user info的URI")]),e._v(" "),r("p",[e._v("security.oauth2.sso.filter-order\n如果没有显示提供WebSecurityConfigurerAdapter时指定的Filter order.")]),e._v(" "),r("p",[e._v("security.oauth2.sso.login-path\n跳转到SSO的登录路径默认为/login.")]),e._v(" "),r("p",[e._v("security.require-ssl\n是否对所有请求开启SSL，默认为false.")]),e._v(" "),r("p",[e._v("security.sessions\n指定Session的创建策略(always, never, if_required, stateless).")]),e._v(" "),r("p",[e._v("security.user.name\n指定默认的用户名，默认为user.")]),e._v(" "),r("p",[e._v("security.user.password\n默认的用户密码.")]),e._v(" "),r("p",[e._v("security.user.role\n默认用户的授权角色.")]),e._v(" "),r("h1",{attrs:{id:"消息中间件的配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#消息中间件的配置"}},[e._v("#")]),e._v(" 消息中间件的配置")]),e._v(" "),r("h2",{attrs:{id:"activemq-配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#activemq-配置"}},[e._v("#")]),e._v(" activemq 配置")]),e._v(" "),r("p",[e._v("spring.activemq.broker-url\n指定ActiveMQ broker的URL，默认自动生成.")]),e._v(" "),r("p",[e._v("spring.activemq.in-memory\n是否是内存模式，默认为true.")]),e._v(" "),r("p",[e._v("spring.activemq.password\n指定broker的密码.")]),e._v(" "),r("p",[e._v("spring.activemq.pooled\n是否创建PooledConnectionFactory，而非ConnectionFactory，默认false")]),e._v(" "),r("p",[e._v("spring.activemq.user\n指定broker的用户.")]),e._v(" "),r("h2",{attrs:{id:"rabbitmq-配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rabbitmq-配置"}},[e._v("#")]),e._v(" rabbitmq 配置")]),e._v(" "),r("p",[e._v("spring.rabbitmq.addresses\n指定client连接到的server的地址，多个以逗号分隔.")]),e._v(" "),r("p",[e._v("spring.rabbitmq.dynamic\n是否创建AmqpAdmin bean. 默认为: true)")]),e._v(" "),r("p",[e._v("spring.rabbitmq.host\n指定RabbitMQ host.默认为: localhost)")]),e._v(" "),r("p",[e._v("spring.rabbitmq.listener.acknowledge-mode\n指定Acknowledge的模式.")]),e._v(" "),r("p",[e._v("spring.rabbitmq.listener.auto-startup\n是否在启动时就启动mq，默认: true)")]),e._v(" "),r("p",[e._v("spring.rabbitmq.listener.concurrency\n指定最小的消费者数量.")]),e._v(" "),r("p",[e._v("spring.rabbitmq.listener.max-concurrency\n指定最大的消费者数量.")]),e._v(" "),r("p",[e._v("spring.rabbitmq.listener.prefetch\n指定一个请求能处理多少个消息，如果有事务的话，必须大于等于transaction数量.")]),e._v(" "),r("p",[e._v("spring.rabbitmq.listener.transaction-size\n指定一个事务处理的消息数量，最好是小于等于prefetch的数量.")]),e._v(" "),r("p",[e._v("spring.rabbitmq.password\n指定broker的密码.")]),e._v(" "),r("p",[e._v("spring.rabbitmq.port\n指定RabbitMQ 的端口，默认: 5672)")]),e._v(" "),r("p",[e._v("spring.rabbitmq.requested-heartbeat\n指定心跳超时，0为不指定.")]),e._v(" "),r("p",[e._v("spring.rabbitmq.ssl.enabled\n是否开始SSL，默认: false)")]),e._v(" "),r("p",[e._v("spring.rabbitmq.ssl.key-store\n指定持有SSL certificate的key store的路径")]),e._v(" "),r("p",[e._v("spring.rabbitmq.ssl.key-store-password\n指定访问key store的密码.")]),e._v(" "),r("p",[e._v("spring.rabbitmq.ssl.trust-store\n指定持有SSL certificates的Trust store.")]),e._v(" "),r("p",[e._v("spring.rabbitmq.ssl.trust-store-password\n指定访问trust store的密码.")]),e._v(" "),r("p",[e._v("spring.rabbitmq.username\n指定登陆broker的用户名.")]),e._v(" "),r("p",[e._v("spring.rabbitmq.virtual-host\n指定连接到broker的Virtual host.")]),e._v(" "),r("h2",{attrs:{id:"jms-配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#jms-配置"}},[e._v("#")]),e._v(" jms 配置")]),e._v(" "),r("p",[e._v("spring.jms.jndi-name\n指定Connection factory JNDI 名称.")]),e._v(" "),r("p",[e._v("spring.jms.listener.acknowledge-mode\n指定ack模式，默认自动ack.")]),e._v(" "),r("p",[e._v("spring.jms.listener.auto-startup\n是否启动时自动启动jms，默认为: true")]),e._v(" "),r("p",[e._v("spring.jms.listener.concurrency\n指定最小的并发消费者数量.")]),e._v(" "),r("p",[e._v("spring.jms.listener.max-concurrency\n指定最大的并发消费者数量.")]),e._v(" "),r("p",[e._v("spring.jms.pub-sub-domain\n是否使用默认的destination type来支持 publish/subscribe，默认: false")])])}),[],!1,null,null,null);s.default=t.exports}}]);