(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{641:function(e,t,a){"use strict";a.r(t);var r=a(42),n=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"_02-springcloud-gateway"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_02-springcloud-gateway"}},[e._v("#")]),e._v(" 02-SpringCloud Gateway")]),e._v(" "),a("p",[e._v("SpringCloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。")]),e._v(" "),a("p",[e._v("SpringCloud Gateway 作为 Spring Cloud 生态系统中的网关，目标是替代 Zuul，在Spring Cloud 2.0以上版本中，没有对新版本的Zuul 2.0以上最新高性能版本进行集成，仍然还是使用的Zuul 2.0之前的非Reactor模式的老版本。而为了提升网关的性能，SpringCloud Gateway是基于WebFlux框架实现的，而WebFlux框架底层则使用了高性能的Reactor模式通信框架Netty。")]),e._v(" "),a("p",[e._v("Spring Cloud Gateway 的目标，不仅提供统一的路由方式，并且基于 Filter 链的方式提供了网关基本的功能，例如：安全，监控/指标，和限流。")]),e._v(" "),a("p",[e._v("提前声明："),a("strong",[e._v("Spring Cloud Gateway 底层使用了高性能的通信框架Netty")]),e._v("。")]),e._v(" "),a("h2",{attrs:{id:"_1-2-springcloud-gateway-特征"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-springcloud-gateway-特征"}},[e._v("#")]),e._v(" "),a("strong",[e._v("1.2")]),e._v(" SpringCloud Gateway 特征")]),e._v(" "),a("p",[e._v("SpringCloud官方，对SpringCloud Gateway 特征介绍如下：")]),e._v(" "),a("p",[e._v("（1）基于 Spring Framework 5，Project Reactor 和 Spring Boot 2.0")]),e._v(" "),a("p",[e._v("（2）集成 Hystrix 断路器")]),e._v(" "),a("p",[e._v("（3）集成 Spring Cloud DiscoveryClient")]),e._v(" "),a("p",[e._v("（4）Predicates 和 Filters 作用于特定路由，易于编写的 Predicates 和 Filters")]),e._v(" "),a("p",[e._v("（5）具备一些网关的高级功能：动态路由、限流、路径重写")]),e._v(" "),a("p",[e._v("从以上的特征来说，和Zuul的特征差别不大。SpringCloud Gateway和Zuul主要的区别，还是在底层的通信框架上。")]),e._v(" "),a("p",[e._v("简单说明一下上文中的三个术语：")]),e._v(" "),a("p",[a("strong",[e._v("（"),a("strong",[e._v("1")]),e._v("）"),a("strong",[e._v("Filter")]),e._v("（过滤器）")]),e._v("：")]),e._v(" "),a("p",[e._v("和Zuul的过滤器在概念上类似，可以使用它拦截和修改请求，并且对上游的响应，进行二次处理。过滤器为org.springframework.cloud.gateway.filter.GatewayFilter类的实例。")]),e._v(" "),a("p",[e._v("（2）"),a("strong",[e._v("Route")]),e._v("（路由）：")]),e._v(" "),a("p",[e._v("网关配置的基本组成模块，和Zuul的路由配置模块类似。一个"),a("strong",[e._v("Route模块")]),e._v("由一个 ID，一个目标 URI，一组断言和一组过滤器定义。如果断言为真，则路由匹配，目标URI会被访问。")]),e._v(" "),a("p",[a("strong",[e._v("（"),a("strong",[e._v("3")]),e._v("）"),a("strong",[e._v("Predicate")]),e._v("（断言）")]),e._v("：")]),e._v(" "),a("p",[e._v("这是一个 Java 8 的 Predicate，可以使用它来匹配来自 HTTP 请求的任何内容，例如 headers 或参数。"),a("strong",[e._v("断言的")]),e._v("输入类型是一个 ServerWebExchange。")]),e._v(" "),a("h2",{attrs:{id:"_1-3-springcloud-gateway和架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-springcloud-gateway和架构"}},[e._v("#")]),e._v(" "),a("strong",[e._v("1.3")]),e._v(" SpringCloud Gateway和架构")]),e._v(" "),a("p",[e._v("Spring在2017年下半年迎来了Webflux，Webflux的出现填补了Spring在响应式编程上的空白，Webflux的响应式编程不仅仅是编程风格的改变，而且对于一系列的著名框架，都提供了响应式访问的开发包，比如Netty、Redis等等。")]),e._v(" "),a("p",[e._v("SpringCloud Gateway 使用的Webflux中的reactor-netty响应式编程组件，底层使用了Netty通讯框架。\n"),a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/19816137-8758f092be21e6f7.gif?imageMogr2/auto-orient/strip",alt:"在这里插入图片描述"}})]),e._v(" "),a("h3",{attrs:{id:"_1-3-1-springcloud-zuul的io模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-1-springcloud-zuul的io模型"}},[e._v("#")]),e._v(" "),a("strong",[e._v("1.3.1")]),e._v(" SpringCloud Zuul的IO模型")]),e._v(" "),a("p",[e._v("Springcloud中所集成的Zuul版本，采用的是Tomcat容器，使用的是传统的Servlet IO处理模型。")]),e._v(" "),a("p",[e._v("大家知道，servlet由servlet container进行生命周期管理。container启动时构造servlet对象并调用servlet init()进行初始化；container关闭时调用servlet destory()销毁servlet；container运行时接受请求，并为每个请求分配一个线程（一般从线程池中获取空闲线程）然后调用service()。")]),e._v(" "),a("p",[e._v("弊端：servlet是一个简单的网络IO模型，当请求进入servlet container时，servlet container就会为其绑定一个线程，在并发不高的场景下这种模型是适用的，但是一旦并发上升，线程数量就会上涨，而线程资源代价是昂贵的（上线文切换，内存消耗大）严重影响请求的处理时间。在一些简单的业务场景下，不希望为每个request分配一个线程，只需要1个或几个线程就能应对极大并发的请求，这种业务场景下servlet模型没有优势。\n"),a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/19816137-bb466f6b0135bb71?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"在这里插入图片描述"}})]),e._v(" "),a("p",[e._v("所以Springcloud Zuul 是基于servlet之上的一个阻塞式处理模型，即spring实现了处理所有request请求的一个servlet（DispatcherServlet），并由该servlet阻塞式处理处理。所以Springcloud Zuul无法摆脱servlet模型的弊端。虽然Zuul 2.0开始，使用了Netty，并且已经有了大规模Zuul 2.0集群部署的成熟案例，但是，Springcloud官方已经没有集成改版本的计划了。")]),e._v(" "),a("h3",{attrs:{id:"_1-3-2-webflux模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-2-webflux模型"}},[e._v("#")]),e._v(" "),a("strong",[e._v("1.3.2")]),e._v(" Webflux模型")]),e._v(" "),a("p",[e._v("Webflux模式替换了旧的Servlet线程模型。用少量的线程处理request和response io操作，这些线程称为Loop线程，而业务交给响应式编程框架处理，响应式编程是非常灵活的，用户可以将业务中阻塞的操作提交到响应式框架的work线程中执行，而不阻塞的操作依然可以在Loop线程中进行处理，大大提高了Loop线程的利用率。官方结构图：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/19816137-dad0e43fc31f4536?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"在这里插入图片描述"}})]),e._v(" "),a("p",[e._v("Webflux虽然可以兼容多个底层的通信框架，但是一般情况下，底层使用的还是Netty，毕竟，Netty是目前业界认可的最高性能的通信框架。而Webflux的Loop线程，正好就是著名的Reactor 模式IO处理模型的Reactor线程，如果使用的是高性能的通信框架Netty，这就是Netty的EventLoop线程。")]),e._v(" "),a("p",[e._v("关于Reactor线程模型，和Netty通信框架的知识，是Java程序员的重要、必备的内功，个中的原理，具体请参见尼恩编著的《Netty、Zookeeper、Redis高并发实战》一书，这里不做过多的赘述。")]),e._v(" "),a("h3",{attrs:{id:"_1-3-3-spring-cloud-gateway的处理流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-3-spring-cloud-gateway的处理流程"}},[e._v("#")]),e._v(" "),a("strong",[e._v("1.3.3")]),e._v(" Spring Cloud Gateway的处理流程")]),e._v(" "),a("p",[e._v("客户端向 Spring Cloud Gateway 发出请求。然后在 Gateway Handler Mapping 中找到与请求相匹配的路由，将其发送到 Gateway Web Handler。Handler 再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回。过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前（“pre”）或之后（“post”）执行业务逻辑。\n"),a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/19816137-eeedbd49be096c05?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"在这里插入图片描述"}})]),e._v(" "),a("h2",{attrs:{id:"_1-4-spring-cloud-gateway路由配置方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-spring-cloud-gateway路由配置方式"}},[e._v("#")]),e._v(" "),a("strong",[e._v("1.4")]),e._v(" Spring Cloud Gateway路由配置方式")]),e._v(" "),a("h3",{attrs:{id:"_1-4-1-基础uri一种路由配置方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-1-基础uri一种路由配置方式"}},[e._v("#")]),e._v(" "),a("strong",[e._v("1.4.1")]),e._v(" 基础URI一种路由配置方式")]),e._v(" "),a("p",[e._v("如果请求的目标地址，是单个的URI资源路径，配置文件示例如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server:\n  port: 8080\nspring:\n  application:\n    name: api-gateway\n  cloud:\n    gateway:\n      routes:\n        -id: url-proxy-1\n          uri: https://blog.csdn.net\n          predicates:\n            -Path=/csdn\n")])])]),a("p",[e._v("各字段含义如下：")]),e._v(" "),a("p",[e._v("id：我们自定义的路由 ID，保持唯一")]),e._v(" "),a("p",[e._v("uri：目标服务地址")]),e._v(" "),a("p",[e._v("predicates：路由条件，Predicate 接受一个输入参数，返回一个布尔值结果。该接口包含多种默认方法来将 Predicate 组合成其他复杂的逻辑（比如：与，或，非）。")]),e._v(" "),a("p",[e._v("上面这段配置的意思是，配置了一个 id 为 url-proxy-1的URI代理规则，路由的规则为：当访问地址http://localhost:8080/csdn/1.jsp时，会路由到上游地址https://blog.csdn.net/1.jsp。")]),e._v(" "),a("h3",{attrs:{id:"_1-4-2-基于代码的路由配置方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-2-基于代码的路由配置方式"}},[e._v("#")]),e._v(" "),a("strong",[e._v("1.4.2")]),e._v(" 基于代码的路由配置方式")]),e._v(" "),a("p",[e._v("转发功能同样可以通过代码来实现，我们可以在启动类 GateWayApplication 中添加方法 customRouteLocator() 来定制转发规则。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('package com.springcloud.gateway;\n \nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.gateway.route.RouteLocator;\nimport org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;\nimport org.springframework.context.annotation.Bean;\n \n@SpringBootApplication\npublic class GatewayApplication {\n \n    public static void main(String[] args) {\n        SpringApplication.run(GatewayApplication.class, args);\n    }\n \n    @Bean\n    public RouteLocator customRouteLocator(RouteLocatorBuilder builder) {\n        return builder.routes()\n                .route("path_route", r -> r.path("/csdn")\n                        .uri("https://blog.csdn.net"))\n                .build();\n    }\n \n}\n')])])]),a("p",[e._v("我们在yaml配置文件中注销掉相关路由的配置，重启服务，访问链接：http://localhost:8080/ csdn， 可以看到和上面一样的页面，证明我们测试成功。")]),e._v(" "),a("p",[e._v("上面两个示例中 uri 都是指向了我的CSDN博客，在实际项目使用中可以将 uri 指向对外提供服务的项目地址，统一对外输出接口。")]),e._v(" "),a("h3",{attrs:{id:"_1-4-3-和注册中心相结合的路由配置方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-3-和注册中心相结合的路由配置方式"}},[e._v("#")]),e._v(" "),a("strong",[e._v("1.4.3")]),e._v(" 和注册中心相结合的路由配置方式")]),e._v(" "),a("p",[e._v("在uri的schema协议部分为自定义的lb:类型，表示从微服务注册中心（如Eureka）订阅服务，并且进行服务的路由。")]),e._v(" "),a("p",[e._v("一个典型的示例如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server:\n  port: 8084\nspring:\n  cloud:\n    gateway:\n      routes:\n      -id: seckill-provider-route\n        uri: lb://seckill-provider\n        predicates:\n        - Path=/seckill-provider/**\n\n      -id: message-provider-route\n        uri: lb://message-provider\n        predicates:\n        -Path=/message-provider/**\n\napplication:\n  name: cloud-gateway\n\neureka:\n  instance:\n    prefer-ip-address: true\n  client:\n    service-url:\n      defaultZone: http://localhost:8888/eureka/\n")])])]),a("p",[e._v("注册中心相结合的路由配置方式，与单个URI的路由配置，区别其实很小，仅仅在于URI的schema协议不同。单个URI的地址的schema协议，一般为http或者https协议。")]),e._v(" "),a("h2",{attrs:{id:"_1-5-详解-springcloud-gateway-匹配规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-详解-springcloud-gateway-匹配规则"}},[e._v("#")]),e._v(" "),a("strong",[e._v("1.5")]),e._v(" 详解：SpringCloud Gateway 匹配规则")]),e._v(" "),a("p",[e._v("Spring Cloud Gateway 的功能很强大，我们仅仅通过 Predicates 的设计就可以看出来，前面我们只是使用了 predicates 进行了简单的条件匹配，其实 Spring Cloud Gataway 帮我们内置了很多 Predicates 功能。")]),e._v(" "),a("p",[e._v("Spring Cloud Gateway 是通过 Spring WebFlux 的 HandlerMapping 做为底层支持来匹配到转发路由，Spring Cloud Gateway 内置了很多 Predicates 工厂，这些 Predicates 工厂通过不同的 HTTP 请求参数来匹配，多个 Predicates 工厂可以组合使用。")]),e._v(" "),a("h3",{attrs:{id:"_1-5-1-predicate-断言条件介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-1-predicate-断言条件介绍"}},[e._v("#")]),e._v(" "),a("strong",[e._v("1.5.1")]),e._v(" Predicate 断言条件介绍")]),e._v(" "),a("p",[e._v("Predicate 来源于 Java 8，是 Java 8 中引入的一个函数，Predicate 接受一个输入参数，返回一个布尔值结果。该接口包含多种默认方法来将 Predicate 组合成其他复杂的逻辑（比如：与，或，非）。可以用于接口请求参数校验、判断新老数据是否有变化需要进行更新操作。")]),e._v(" "),a("p",[e._v("在 Spring Cloud Gateway 中 Spring 利用 Predicate 的特性实现了各种路由匹配规则，有通过 Header、请求参数等不同的条件来进行作为条件匹配到对应的路由。网上有一张图总结了 Spring Cloud 内置的几种 Predicate 的实现。\n"),a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/19816137-bb046dbf19bee1b4.gif?imageMogr2/auto-orient/strip",alt:"在这里插入图片描述"}}),e._v("\n[\n说白了 Predicate 就是为了实现一组匹配规则，方便让请求过来找到对应的 Route 进行处理，接下来我们接下 Spring Cloud GateWay 内置几种 Predicate 的使用。")]),e._v(" "),a("h3",{attrs:{id:"_1-5-2-通过请求参数匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-2-通过请求参数匹配"}},[e._v("#")]),e._v(" "),a("strong",[e._v("1.5.2")]),e._v(" 通过请求参数匹配")]),e._v(" "),a("p",[e._v("Query Route Predicate 支持传入两个参数，一个是属性名一个为属性值，属性值可以是正则表达式。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server:\n\n  port: 8080\n\nspring:\n\n  application:\n\n    name: api-gateway\n\n  cloud:\n\n    gateway:\n\n      routes:\n\n        -id: gateway-service\n\n          uri: https://www.baidu.com\n\n          order: 0\n\n          predicates:\n\n            -Query=smile\n")])])]),a("p",[e._v("这样配置，只要请求中包含 smile 属性的参数即可匹配路由。")]),e._v(" "),a("p",[e._v("使用 curl 测试，命令行输入:")]),e._v(" "),a("p",[e._v("curl localhost:8080?smile=x&id=2")]),e._v(" "),a("p",[e._v("经过测试发现只要请求汇总带有 smile 参数即会匹配路由，不带 smile 参数则不会匹配。")]),e._v(" "),a("p",[e._v("还可以将 Query 的值以键值对的方式进行配置，这样在请求过来时会对属性值和正则进行匹配，匹配上才会走路由。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server:\n\n  port: 8080\n\nspring:\n\n  application:\n\n    name: api-gateway\n\n  cloud:\n\n    gateway:\n\n      routes:\n\n        -id: gateway-service\n\n          uri: https://www.baidu.com\n\n          order: 0\n\n          predicates:\n\n            -Query=keep, pu.\n")])])]),a("p",[e._v("这样只要当请求中包含 keep 属性并且参数值是以 pu 开头的长度为三位的字符串才会进行匹配和路由。")]),e._v(" "),a("p",[e._v("使用 curl 测试，命令行输入:")]),e._v(" "),a("p",[e._v("curl localhost:8080?keep=pub")]),e._v(" "),a("p",[e._v("测试可以返回页面代码，将 keep 的属性值改为 pubx 再次访问就会报 404,证明路由需要匹配正则表达式才会进行路由。")]),e._v(" "),a("h3",{attrs:{id:"_1-5-3-通过-header-属性匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-3-通过-header-属性匹配"}},[e._v("#")]),e._v(" "),a("strong",[e._v("1.5.3")]),e._v(" 通过 Header 属性匹配")]),e._v(" "),a("p",[e._v("Header Route Predicate 和 Cookie Route Predicate 一样，也是接收 2 个参数，一个 header 中属性名称和一个正则表达式，这个属性值和正则表达式匹配则执行。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server:\n\n  port: 8080\n\nspring:\n\n  application:\n\n    name: api-gateway\n\n  cloud:\n\n    gateway:\n\n      routes:\n\n        -id: gateway-service\n\n          uri: https://www.baidu.com\n\n          order: 0\n\n          predicates:\n\n            - Header=X-Request-Id, \\d+\n")])])]),a("p",[e._v("使用 curl 测试，命令行输入:")]),e._v(" "),a("p",[e._v("curl "),a("a",{attrs:{href:"http://localhost:8080/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://localhost:8080"),a("OutboundLink")],1),e._v(' -H "X-Request-Id:88"')]),e._v(" "),a("p",[e._v('则返回页面代码证明匹配成功。将参数-H "X-Request-Id:88"改为-H "X-Request-Id:spring"再次执行时返回404证明没有匹配。')]),e._v(" "),a("h3",{attrs:{id:"_1-5-4-通过-cookie-匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-4-通过-cookie-匹配"}},[e._v("#")]),e._v(" "),a("strong",[e._v("1.5.4")]),e._v(" 通过 Cookie 匹配")]),e._v(" "),a("p",[e._v("Cookie Route Predicate 可以接收两个参数，一个是 Cookie name ,一个是正则表达式，路由规则会通过获取对应的 Cookie name 值和正则表达式去匹配，如果匹配上就会执行路由，如果没有匹配上则不执行。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server:\n\n  port: 8080\n\nspring:\n\n  application:\n\n    name: api-gateway\n\n  cloud:\n\n    gateway:\n\n      routes:\n\n        -id: gateway-service\n\n          uri: https://www.baidu.com\n\n          order: 0\n\n          predicates:\n\n            - Cookie=sessionId, test\n")])])]),a("p",[e._v("使用 curl 测试，命令行输入:")]),e._v(" "),a("p",[e._v("curl "),a("a",{attrs:{href:"http://localhost:8080/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://localhost:8080"),a("OutboundLink")],1),e._v(' --cookie "sessionId=test"')]),e._v(" "),a("p",[e._v('则会返回页面代码，如果去掉--cookie "sessionId=test"，后台汇报 404 错误。')]),e._v(" "),a("h3",{attrs:{id:"_1-5-5-通过-host-匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-5-通过-host-匹配"}},[e._v("#")]),e._v(" "),a("strong",[e._v("1.5.5")]),e._v(" 通过 Host 匹配")]),e._v(" "),a("p",[e._v("Host Route Predicate 接收一组参数，一组匹配的域名列表，这个模板是一个 ant 分隔的模板，用.号作为分隔符。它通过参数中的主机地址作为匹配规则。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server:\n\n  port: 8080\n\nspring:\n\n  application:\n\n    name: api-gateway\n\n  cloud:\n\n    gateway:\n\n      routes:\n\n        -id: gateway-service\n\n          uri: https://www.baidu.com\n\n          order: 0\n\n          predicates:\n\n            - Host=**.baidu.com\n")])])]),a("p",[e._v("使用 curl 测试，命令行输入:")]),e._v(" "),a("p",[e._v("curl "),a("a",{attrs:{href:"http://localhost:8080/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://localhost:8080"),a("OutboundLink")],1),e._v(' -H "Host: www.baidu.com"')]),e._v(" "),a("p",[e._v("curl "),a("a",{attrs:{href:"http://localhost:8080/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://localhost:8080"),a("OutboundLink")],1),e._v(' -H "Host: md.baidu.com"')]),e._v(" "),a("p",[e._v("经测试以上两种 host 均可匹配到 host_route 路由，去掉 host 参数则会报 404 错误。")]),e._v(" "),a("h3",{attrs:{id:"_1-5-6-通过请求方式匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-6-通过请求方式匹配"}},[e._v("#")]),e._v(" "),a("strong",[e._v("1.5.6")]),e._v(" 通过请求方式匹配")]),e._v(" "),a("p",[e._v("可以通过是 POST、GET、PUT、DELETE 等不同的请求方式来进行路由。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server:\n\n  port: 8080\n\nspring:\n\n  application:\n\n    name: api-gateway\n\n  cloud:\n\n    gateway:\n\n      routes:\n\n        -id: gateway-service\n\n          uri: https://www.baidu.com\n\n          order: 0\n\n          predicates:\n\n            - Method=GET\n")])])]),a("p",[e._v("使用 curl 测试，命令行输入:")]),e._v(" "),a("p",[e._v("## curl 默认是以 GET 的方式去请求")]),e._v(" "),a("p",[e._v("curl "),a("a",{attrs:{href:"http://localhost:8080/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://localhost:8080"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("测试返回页面代码，证明匹配到路由，我们再以 POST 的方式请求测试。")]),e._v(" "),a("p",[e._v("## curl 默认是以 GET 的方式去请求")]),e._v(" "),a("p",[e._v("curl -X POST "),a("a",{attrs:{href:"http://localhost:8080/",target:"_blank",rel:"noopener noreferrer"}},[e._v("http://localhost:8080"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("返回 404 没有找到，证明没有匹配上路由")]),e._v(" "),a("h3",{attrs:{id:"_1-5-7-通过请求路径匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-7-通过请求路径匹配"}},[e._v("#")]),e._v(" "),a("strong",[e._v("1.5.7")]),e._v(" 通过请求路径匹配")]),e._v(" "),a("p",[e._v("Path Route Predicate 接收一个匹配路径的参数来判断是否走路由。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server:\n\n  port: 8080\n\nspring:\n\n  application:\n\n    name: api-gateway\n\n  cloud:\n\n    gateway:\n\n      routes:\n\n        -id: gateway-service\n\n          uri: http://ityouknow.com\n\n          order: 0\n\n          predicates:\n\n            -Path=/foo/{segment}\n")])])]),a("p",[e._v("如果请求路径符合要求，则此路由将匹配，例如：/foo/1 或者 /foo/bar。")]),e._v(" "),a("p",[e._v("使用 curl 测试，命令行输入:")]),e._v(" "),a("p",[e._v("curl http://localhost:8080/foo/1")]),e._v(" "),a("p",[e._v("curl http://localhost:8080/foo/xx")]),e._v(" "),a("p",[e._v("curl http://localhost:8080/boo/xx")]),e._v(" "),a("p",[e._v("经过测试第一和第二条命令可以正常获取到页面返回值，最后一个命令报404，证明路由是通过指定路由来匹配。")]),e._v(" "),a("h3",{attrs:{id:"_1-5-8-通过请求-ip-地址进行匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-8-通过请求-ip-地址进行匹配"}},[e._v("#")]),e._v(" "),a("strong",[e._v("1.5.8")]),e._v(" 通过请求 ip 地址进行匹配")]),e._v(" "),a("p",[e._v("Predicate 也支持通过设置某个 ip 区间号段的请求才会路由，RemoteAddr Route Predicate 接受 cidr 符号(IPv4 或 IPv6 )字符串的列表(最小大小为1)，例如 192.168.0.1/16 (其中 192.168.0.1 是 IP 地址，16 是子网掩码)。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server:\n\n  port: 8080\n\nspring:\n\n  application:\n\n    name: api-gateway\n\n  cloud:\n\n    gateway:\n\n      routes:\n\n        - id: gateway-service\n\n          uri: https://www.baidu.com\n\n          order: 0\n\n          predicates:\n\n            - RemoteAddr=192.168.1.1/24\n")])])]),a("p",[e._v("可以将此地址设置为本机的 ip 地址进行测试。")]),e._v(" "),a("p",[e._v("curl localhost:8080")]),e._v(" "),a("p",[e._v("如果请求的远程地址是 192.168.1.10，则此路由将匹配。")]),e._v(" "),a("h3",{attrs:{id:"_1-5-10-组合使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-10-组合使用"}},[e._v("#")]),e._v(" "),a("strong",[e._v("1.5.10")]),e._v(" "),a("strong",[e._v("组合使用")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server:\n  port: 8080\nspring:\n  application:\n    name: api-gateway\n  cloud:\n    gateway:\n      routes:\n        - id: gateway-service\n          uri: https://www.baidu.com\n          order: 0\n          predicates:\n            - Host=**.foo.org\n            - Path=/headers\n            - Method=GET\n            - Header=X-Request-Id, \\d+\n            - Query=foo, ba.\n            - Query=baz\n            - Cookie=chocolate, ch.p\n")])])]),a("p",[e._v("各种 Predicates 同时存在于同一个路由时，请求必须同时满足所有的条件才被这个路由匹配。")]),e._v(" "),a("p",[e._v("一个请求满足多个路由的断言条件时，请求只会被首个成功匹配的路由转发")]),e._v(" "),a("h2",{attrs:{id:"_1-6-springcloud-gateway-高级功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-springcloud-gateway-高级功能"}},[e._v("#")]),e._v(" "),a("strong",[e._v("1.6")]),e._v(" Springcloud gateway 高级功能")]),e._v(" "),a("h3",{attrs:{id:"_1-6-1-实现熔断降级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-1-实现熔断降级"}},[e._v("#")]),e._v(" "),a("strong",[e._v("1.6.1")]),e._v(" 实现熔断降级")]),e._v(" "),a("p",[e._v("为什么要实现熔断降级？")]),e._v(" "),a("p",[e._v("在分布式系统中，网关作为流量的入口，因此会有大量的请求进入网关，向其他服务发起调用，其他服务不可避免的会出现调用失败（超时、异常），失败时不能让请求堆积在网关上，需要快速失败并返回给客户端，想要实现这个要求，就必须在网关上做熔断、降级操作。")]),e._v(" "),a("p",[e._v("为什么在网关上请求失败需要快速返回给客户端？")]),e._v(" "),a("p",[e._v("因为当一个客户端请求发生故障的时候，这个请求会一直堆积在网关上，当然只有一个这种请求，网关肯定没有问题（如果一个请求就能造成整个系统瘫痪，那这个系统可以下架了），但是网关上堆积多了就会给网关乃至整个服务都造成巨大的压力，甚至整个服务宕掉。因此要对一些服务和页面进行有策略的降级，以此缓解服务器资源的的压力，以保证核心业务的正常运行，同时也保持了客户和大部分客户的得到正确的相应，所以需要网关上请求失败需要快速返回给客户端。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server.port: 8082\n\nspring:\n  application:\n    name: gateway\n  redis:\n      host: localhost\n      port: 6379\n      password: 123456\n  cloud:\n    gateway:\n      routes:\n        - id: rateLimit_route\n          uri: http://localhost:8000\n          order: 0\n          predicates:\n            - Path=/test/**\n          filters:\n            - StripPrefix=1\n            - name: Hystrix\n              args:\n                name: fallbackCmdA\n                fallbackUri: forward:/fallbackA\n\n  hystrix.command.fallbackCmdA.execution.isolation.thread.timeoutInMilliseconds: 5000\n")])])]),a("p",[e._v("这里的配置，使用了两个过滤器：")]),e._v(" "),a("p",[e._v("（1）过滤器StripPrefix，作用是去掉请求路径的最前面n个部分截取掉。")]),e._v(" "),a("p",[e._v("StripPrefix=1就代表截取路径的个数为1，比如前端过来请求/test/good/1/view，匹配成功后，路由到后端的请求路径就会变成http://localhost:8888/good/1/view。")]),e._v(" "),a("p",[e._v("（2）过滤器Hystrix，作用是通过Hystrix进行熔断降级")]),e._v(" "),a("p",[e._v("当上游的请求，进入了Hystrix熔断降级机制时，就会调用fallbackUri配置的降级地址。需要注意的是，还需要单独设置Hystrix的commandKey的超时时间")]),e._v(" "),a("p",[e._v("fallbackUri配置的降级地址的代码如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('package org.gateway.controller;\n\nimport org.gateway.response.Response;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class FallbackController {\n\n    @GetMapping("/fallbackA")\n    public Response fallbackA() {\n        Response response = new Response();\n        response.setCode("100");\n        response.setMessage("服务暂时不可用");\n        return response;\n    }\n}\n')])])]),a("h3",{attrs:{id:"_1-6-2-分布式限流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-2-分布式限流"}},[e._v("#")]),e._v(" "),a("strong",[e._v("1.6.2")]),e._v(" 分布式限流")]),e._v(" "),a("p",[e._v("从某种意义上讲，令牌桶算法是对漏桶算法的一种改进，桶算法能够限制请求调用的速率，而令牌桶算法能够在限制调用的平均速率的同时还允许一定程度的突发调用。在令牌桶算法中，存在一个桶，用来存放固定数量的令牌。算法中存在一种机制，以一定的速率往桶中放令牌。每次请求调用需要先获取令牌，只有拿到令牌，才有机会继续执行，否则选择选择等待可用的令牌、或者直接拒绝。放令牌这个动作是持续不断的进行，如果桶中令牌数达到上限，就丢弃令牌，所以就存在这种情况，桶中一直有大量的可用令牌，这时进来的请求就可以直接拿到令牌执行，比如设置qps为100，那么限流器初始化完成一秒后，桶中就已经有100个令牌了，这时服务还没完全启动好，等启动完成对外提供服务时，该限流器可以抵挡瞬时的100个请求。所以，只有桶中没有令牌时，请求才会进行等待，最后相当于以一定的速率执行。\n"),a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/19816137-89297e59a487540d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"在这里插入图片描述"}})]),e._v(" "),a("p",[e._v("在Spring Cloud Gateway中，有Filter过滤器，因此可以在“pre”类型的Filter中自行实现上述三种过滤器。但是限流作为网关最基本的功能，Spring Cloud Gateway官方就提供了RequestRateLimiterGatewayFilterFactory这个类，适用在Redis内的通过执行Lua脚本实现了令牌桶的方式。具体实现逻辑在RequestRateLimiterGatewayFilterFactory类中，lua脚本在如下图所示的文件夹中：\n"),a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/19816137-0456652619daecaa?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"在这里插入图片描述"}})]),e._v(" "),a("p",[e._v("首先在工程的pom文件中引入gateway的起步依赖和redis的reactive依赖，代码如下：")]),e._v(" "),a("p",[e._v("配置如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server:\n  port: 8081\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: limit_route\n        uri: http://httpbin.org:80/get\n        predicates:\n        - After=2017-01-20T17:42:47.789-07:00[America/Denver]\n        filters:\n        - name: RequestRateLimiter\n          args:\n            key-resolver: '#{@userKeyResolver}'\n            redis-rate-limiter.replenishRate: 1\n            redis-rate-limiter.burstCapacity: 3\n  application:\n    name: cloud-gateway\n  redis:\n    host: localhost\n    port: 6379\n    database: 0\n")])])]),a("p",[e._v("在上面的配置文件，指定程序的端口为8081，配置了 redis的信息，并配置了RequestRateLimiter的限流过滤器，该过滤器需要配置三个参数：")]),e._v(" "),a("ul",[a("li",[e._v("burstCapacity，令牌桶总容量。")]),e._v(" "),a("li",[e._v("replenishRate，令牌桶每秒填充平均速率。")]),e._v(" "),a("li",[e._v("key-resolver，用于限流的键的解析器的 Bean 对象的名字。它使用 SpEL 表达式根据#{@beanName}从 Spring 容器中获取 Bean 对象。")])]),e._v(" "),a("p",[e._v("这里根据用户ID限流，请求路径中必须携带userId参数")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@Bean\n\nKeyResolver userKeyResolver() {\n  return exchange -> Mono.just(exchange.getRequest().getQueryParams().getFirst("user"));\n}\n\n \n')])])]),a("p",[e._v("KeyResolver需要实现resolve方法，比如根据userid进行限流，则需要用userid去判断。实现完KeyResolver之后，需要将这个类的Bean注册到Ioc容器中。")]),e._v(" "),a("p",[e._v("如果需要根据IP限流，定义的获取限流Key的bean为：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("@Bean\npublic KeyResolver ipKeyResolver() {\n  return exchange -> Mono.just(exchange.getRequest().getRemoteAddress().getHostName());\n}\n")])])]),a("p",[e._v("通过exchange对象可以获取到请求信息，这边用了HostName，如果你想根据用户来做限流的话这边可以获取当前请求的用户ID或者用户名就可以了，比如：")]),e._v(" "),a("p",[e._v("如果需要根据接口的URI进行限流，则需要获取请求地址的uri作为限流key，定义的Bean对象为：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("@Bean\nKeyResolver apiKeyResolver() {\n  return exchange -> Mono.just(exchange.getRequest().getPath().value());\n}\n")])])]),a("p",[e._v("通过exchange对象可以获取到请求信息，这边用了HostName，如果你想根据用户来做限流的话这边可以获取当前请求的用户ID或者用户名就可以了，比如：")]),e._v(" "),a("p",[e._v("如果需要根据接口的URI进行限流，则需要获取请求地址的uri作为限流key，定义的Bean对象为：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("@Bean\nKeyResolver apiKeyResolver() {\n  return exchange -> Mono.just(exchange.getRequest().getPath().value());\n}\n")])])]),a("p",[e._v("最后，介绍一下疯狂创客圈："),a("strong",[e._v("疯狂创客圈，一个Java 高并发研习社群")]),e._v(" 【"),a("a",{attrs:{href:"https://www.cnblogs.com/crazymakercircle/p/9904544.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("博客园 总入口"),a("OutboundLink")],1),e._v(" 】")])])}),[],!1,null,null,null);t.default=n.exports}}]);