(window.webpackJsonp=window.webpackJsonp||[]).push([[224],{787:function(t,a,_){"use strict";_.r(a);var v=_(42),r=Object(v.a)({},(function(){var t=this,a=t.$createElement,_=t._self._c||a;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"_1-2-性能调优的层次"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-性能调优的层次"}},[t._v("#")]),t._v(" 1.2 性能调优的层次")]),t._v(" "),_("p",[t._v("为了提升系统性能，开发人员可以从系统的各个角度和层次对系统进行优化。除了最常见的代码优化外，在软件架构上、JVM虚拟机层、数据库以及系统操作层面都可以通过各种手段进行调优，从而在整体上提升系统的性能。")]),t._v(" "),_("h2",{attrs:{id:"_1-2-1-设计调优"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-设计调优"}},[t._v("#")]),t._v(" 1.2.1 设计调优")]),t._v(" "),_("p",[t._v("设计调优处于所有调优手段的上层，它往往需要再软件开发之前进行。在软件开发之处，软件架构师就应该评估系统可能存在的各种潜在问题，并给出合理的设计方案。由于软件设计和架构对软件整体质量有决定性的影响，所以，设计调优对系统性能的影响也是最大的。如果说，代码优化、JVM优化都是对系统微观层面上“量”的优化，那么设计优化就是对系统在宏观层面上“质”的优化。")]),t._v(" "),_("p",[t._v("设计优化的一大显著特点是，它可以规避某一个组件的性能问题，而非改良该组件的实现。比如，系统中组件A需要等待某事件E才能触发一个行为。如果组件A通过循环监控不断监测事件E是否发生，其监控行为必然会占用部分系统资源，因此开发人员必须在检测频率和资源消耗间取得平衡。如果检测频率太低，虽然减少了资源消耗，但是系统实时反映性就会降低。如果进行代码层的调优，就需要优化检测方法的实现以及求得一个最为恰当的监测频率。")]),t._v(" "),_("p",[t._v("而若将此问题预留在设计成解决，便可以使用事件通知的方式将系统行为进行倒置。如使用第2章中提到的观察者模式，在事件E发生的时刻，由事件E通知组件A，从而触发组件A的行为。这种设计方法弃用了存在性能隐患的循环监控，从根本上解决了这一问题。")]),t._v(" "),_("p",[t._v("从某种程度上说，设计优化直接决定了系统的整体品质。如果在设计层面考虑不周，留下田铎问题隐患，那么这些“质”上的问题，也许无法再通过代码层的优化进行弥补。因此，开发人员必须在软件设计之初，认真仔细考虑软件系统的性能问题。")]),t._v(" "),_("p",[t._v("进行设计优化时，设计人员必须熟悉常用软件的设计方法、设计模式、基本性能组件和常用的优化思想，并将其有机地集成再软件系统中。")]),t._v(" "),_("p",[_("strong",[t._v("注意：一个良好的系统设计可以规避很多潜在的性能问题。因此，尽可能多花些时间在系统设计上，是创建高性能程序的关键")])]),t._v(" "),_("h2",{attrs:{id:"_1-2-2-代码调优"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-代码调优"}},[t._v("#")]),t._v(" 1.2.2 代码调优")]),t._v(" "),_("p",[t._v("代码调优是在软件开发过程中，或者在软件开发完成后，软件维护过程中对程序代码的改进和优化。代码优化涉及诸多编码技巧，需要开发人员熟悉相关语言的API，并在合适的场景中正确的使用相关API或类库。同时，对算法、数据结构的灵活使用，也是代码优化的重要内容。")]),t._v(" "),_("p",[t._v("虽然代码优化是从微观上对性能进行调整，单是一个好的实现和一个坏的实现对系统的影响也是非常大的。比如，同样作为List的实现，LinkedList 和 ArrayList 在随机访问上的性能可以相差几个数量级；又比如：同样是文件读写的实现，使用Stream方式与Java NIO的方式，其性能可能又会相差一个数量级。")]),t._v(" "),_("p",[t._v("因此，虽然与设计优化相比，将代码优化成为在围观层面上的优化，但是它却是对系统性能产生最直接影响的优化方法。")]),t._v(" "),_("h2",{attrs:{id:"_1-2-3-jvm调优"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-jvm调优"}},[t._v("#")]),t._v(" 1.2.3 JVM调优")]),t._v(" "),_("p",[t._v("​\t\t由于Java软件总是运行在 JVM虚拟机之上，对 JVM虚拟机进行优化也能在一定程度上提升Java程序的性能。 JVM调优通常可以再软件开发后期进行，如在软件开发完成或者在软件开发的某一里程碑阶段。")]),t._v(" "),_("p",[t._v("​\t\t作为Java软件的运行平台，JVM的各项参数将会直接影响Java程序的性能。比如，JVM的堆大小、垃圾回收策略等。")]),t._v(" "),_("p",[t._v("​\t\t要进行JVM层面的调优，需要开发人员对JVM的运行原理和基本内存结构有一定的了解。如：堆内存结构、GC的种类等。然后，依据应用程序的特点，设置合理的JVM启动参数。")]),t._v(" "),_("h2",{attrs:{id:"_1-2-4-数据库调优"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-4-数据库调优"}},[t._v("#")]),t._v(" 1.2.4 数据库调优")]),t._v(" "),_("p",[t._v("​\t\t对绝大部分应用系统而言，数据库是必不可少的一部分。Java程序可以使用JDBC的方式连接数据库。对数据库的调优可以分为3个部分：")]),t._v(" "),_("ul",[_("li",[t._v("在应用层对SQL语句进行优化")]),t._v(" "),_("li",[t._v("对数据库进行优化")]),t._v(" "),_("li",[t._v("对数据库软件进行优化")])]),t._v(" "),_("p",[t._v("​\t\t在应用层优化数据库访问，涉及大量的编程技巧。比如，当使用JDBC进行查询时，对于大量的拥有相同结构的SQL查询，可以使用 PreparedStatement 代替 Statement，以提高数据库的查询效率；在 Select 语句中，显示指定要查询的列名，避免使用 “*” 。")]),t._v(" "),_("p",[t._v("​\t\t在对数据库进行优化时，主要目的是建立一个具有良好表结构的数据库，比如，为了提高多表级联查询效率，可以合理的使用冗余字段；对于大表，可以使用行的水平切割或类似 Oracle分区表的技术；为了提高数据库查询效率，可以建立有效合理的索引。")]),t._v(" "),_("p",[t._v("​\t\t对于数据库软件的优化，根据不同的数据库，如 Oracle、Mysql 或者 Sql Server 都用友不同的方式。以 Oracle为例，设置合理大小的共享池、缓存缓冲区或者PGA，对Oracle的运行性能都有很大的影响。")]),t._v(" "),_("h2",{attrs:{id:"_1-2-5-操作系统调优"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-5-操作系统调优"}},[t._v("#")]),t._v(" 1.2.5 操作系统调优")]),t._v(" "),_("p",[t._v("​\t\t作为软件原型的基础平台，操作系统的性能对应用系统也有较大的影响。不同类型的操作系统，调优手段和参数可能会有所不同。比如，在主流Unix 系统中，共享内存段、信号量、共享内存最大值（shmmax）、共享内存最小值（shmmin）等都是可以进行优化的系统资源。此外，如最大文件句柄数、虚拟内存大小、磁盘的块大小等参数都可能对软件的性能产生影响。")])])}),[],!1,null,null,null);a.default=r.exports}}]);