(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{355:function(a,t,s){a.exports=s.p+"assets/img/1.7f067c71.png"},356:function(a,t,s){a.exports=s.p+"assets/img/2.70233eb7.png"},357:function(a,t,s){a.exports=s.p+"assets/img/3.7fae73d2.png"},358:function(a,t,s){a.exports=s.p+"assets/img/4.a31665d3.png"},359:function(a,t,s){a.exports=s.p+"assets/img/5.2907961e.png"},360:function(a,t,s){a.exports=s.p+"assets/img/6.5871e24a.png"},361:function(a,t,s){a.exports=s.p+"assets/img/7.1bbf6bae.png"},362:function(a,t,s){a.exports=s.p+"assets/img/8.0d5b7389.png"},363:function(a,t,s){a.exports=s.p+"assets/img/9.b8de819c.png"},364:function(a,t,s){a.exports=s.p+"assets/img/10.a242a27f.png"},365:function(a,t,s){a.exports=s.p+"assets/img/11.475409c9.png"},366:function(a,t,s){a.exports=s.p+"assets/img/12.1d56c0e8.png"},367:function(a,t,s){a.exports=s.p+"assets/img/13.9ecbc87f.png"},583:function(a,t,s){"use strict";s.r(t);var e=s(42),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"_02-jdk-bin下相关工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_02-jdk-bin下相关工具"}},[a._v("#")]),a._v(" 02-jdk-bin下相关工具")]),a._v(" "),e("h2",{attrs:{id:"一、基本工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、基本工具"}},[a._v("#")]),a._v(" 一、基本工具")]),a._v(" "),e("p",[e("strong",[a._v("javac.exe")]),a._v("\t-- Java语言编译器\n"),e("strong",[a._v("java.exe")]),a._v(" \t-- Java应用程序启动器，JDK 1.6版里同时用于开发和部署，旧的部署启动器，jre，不在提供\n"),e("strong",[a._v("javadoc.exe")]),a._v(" -- Java API 文档生成器\n"),e("strong",[a._v("apt.exe")]),a._v(" \t-- java 注释处理器\n"),e("strong",[a._v("appletviewer.exe")]),a._v(" -- java applet 小程序查看器"),e("br"),a._v(" "),e("strong",[a._v("jar.exe")]),a._v(" \t-- java文件压缩打包工具\n"),e("strong",[a._v("jdb.exe")]),a._v("\t-- Java 调试器.\n"),e("strong",[a._v("javah.exe")]),a._v(" \t-- C 头文件和stub生成器，用于写本地化方法，例如生产JNI样式的头文件\n"),e("strong",[a._v("javap.exe")]),a._v("\t-- class文件 反编译工具\n"),e("strong",[a._v("extcheck.exe")]),a._v("\t -- 用于检测jar包中的问题")]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[a._v("C:"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("Users"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("dong"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("jar --help\n用法: jar "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("OPTION"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("."),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("--release VERSION"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("-C dir"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" files"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v(".\njar 创建类和资源的档案, 并且可以处理档案中的单个类或资源或者从档案中还原单个类或资源。\n\n 示例:\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 创建包含两个类文件的名为 classes.jar 的档案:")]),a._v("\n jar --create --file classes.jar Foo.class Bar.class\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 使用现有的清单创建档案, 其中包含 foo/ 中的所有文件:")]),a._v("\n jar --create --file classes.jar --manifest mymanifest -C foo/ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v(".")]),a._v("\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 创建模块化 jar 档案, 其中模块描述符位于")]),a._v("\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# classes/module-info.class:")]),a._v("\n jar --create --file foo.jar --main-class com.foo.Main --module-version "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1.0")]),a._v(" -C foo/ classes resources\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 将现有的非模块化 jar 更新为模块化 jar:")]),a._v("\n jar --update --file foo.jar --main-class com.foo.Main --module-version "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1.0")]),a._v(" -C foo/ module-info.class\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 创建包含多个发行版的 jar, 并将一些文件放在 META-INF/versions/9 目录中:")]),a._v("\n jar --create --file mr.jar -C foo classes --release "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("9")]),a._v(" -C foo9 classes\n\n要缩短或简化 jar 命令, 可以在单独的文本文件中指定参数,\n并使用 @ 符号作为前缀将此文件传递给 jar 命令。\n\n 示例:\n "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 从文件 classes.list 读取附加选项和类文件列表")]),a._v("\n jar --create --file my.jar @classes.list\n\n\n 主操作模式:\n\n  -c, --create               创建档案\n  -i, --generate-index"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("FILE  为指定的 jar 档案生成索引信息\n  -t, --list                 列出档案的目录\n  -u, --update               更新现有 jar 档案\n  -x, --extract              从档案中提取指定的 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("或全部"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" 文件\n  -d, --describe-module      输出模块描述符或自动模块名称\n\n 在任意模式下有效的操作修饰符:\n\n  -C DIR                     更改为指定的目录并包含以下文件\n  -f, --file"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("FILE            档案文件名。省略时, 基于操作使用 stdin 或 stdout\n      --release VERSION      将下面的所有文件都放在jar 的版本化目录中 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("即 META-INF/versions/VERSION/"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n  -v, --verbose              在标准输出中生成详细输出\n\n 在创建和更新模式下有效的操作修饰符:\n\n  -e, --main-class"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("CLASSNAME 捆绑到模块化或可执行jar 档案的独立应用程序的应用程序入口点\n  -m, --manifest"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("FILE        包含指定清单文件中的清单信息\n  -M, --no-manifest          不为条目创建清单文件\n      --module-version"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("VERSION    创建模块化 jar 或更新非模块化 jar 时的模块版本\n      --hash-modules"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("PATTERN 计算和记录模块的散列,这些模块按指定模式匹配并直接或间接依赖于所创建的模块化 jar 或所更新的非模块化 jar\n  -p, --module-path          模块被依赖对象的位置, 用于生成散列\n\n 只在创建, 更新和生成索引模式下有效的操作修饰符:\n\n  -0, --no-compress          仅存储"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" 不使用 ZIP 压缩\n\n 其他选项:\n\n  -?, -h, --help"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(":compat"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("    提供此帮助，也可以选择性地提供兼容性帮助\n      --help-extra           提供额外选项的帮助\n      --version              输出程序版本\n\n 如果模块描述符 "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("'module-info.class'")]),a._v(" 位于指定目录的\n 根目录中, 或者位于 jar 档案本身的根目录中, 则\n 该档案是一个模块化 jar。以下操作只在创建模块化 jar,\n 或更新现有的非模块化 jar 时有效: "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("'--module-version'")]),a._v(",\n "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("'--hash-modules'")]),a._v(" 和 "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("'--module-path'")]),a._v("。\n\n 如果为长选项提供了必需参数或可选参数, 则它们对于\n 任何对应的短选项也是必需或可选的。\n")])])]),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[a._v("C:"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("Users"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("dong"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("javac\n用法: javac "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("options"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("source files"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("\n其中, 可能的选项包括:\n  @"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("filename"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("                  从文件读取选项和文件名\n  -Akey"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("                传递给注释处理程序的选项\n  --add-modules "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("模块"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v(","),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("模块"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("* 除了初始模块之外要解析的根模块"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" 如果 "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("module"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 为 ALL-MODULE-"),e("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("PATH")]),a._v(", 则为模块路径中的所有模块。\n  --boot-class-path "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("path"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(", -bootclasspath "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("path"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 覆盖引导类文件的位置\n  --class-path "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("path"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(", -classpath "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("path"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(", -cp "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("path"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 指定查找用户类文件和注释处理程序的位置\n  -d "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("directory"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("               指定放置生成的类文件的位置\n  -deprecation                 输出使用已过时的 API 的源位置\n  --enable-preview             启用预览语言功能。要与 -source 或 --release 一起使用。\n  -encoding "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("encoding"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("         指定源文件使用的字符编码\n  -endorseddirs "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("dirs"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("         覆盖签名的标准路径的位置\n  -extdirs "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("dirs"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("              覆盖所安装扩展的位置\n  -g                           生成所有调试信息\n  -g:"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("lines,vars,source"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("       只生成某些调试信息\n  -g:none                      不生成任何调试信息\n  -h "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("directory"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("               指定放置生成的本机标头文件的位置\n  --help, -help, -?            输出此帮助消息\n  --help-extra, -X             输出额外选项的帮助\n  -implicit:"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("none,class"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("       指定是否为隐式引用文件生成类文件\n  -J"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("flag"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("                     直接将 "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("标记"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 传递给运行时系统\n  --limit-modules "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("模块"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v(","),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("模块"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("* 限制可观察模块的领域\n  --module "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("module-name"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(", -m "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("module-name"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 只编译指定的模块, 请检查时间戳\n  --module-path "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("path"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(", -p "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("path"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 指定查找应用程序模块的位置\n  --module-source-path "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("module-source-path"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 指定查找多个模块的输入源文件的位置\n  --module-version "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("版本"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("        指定正在编译的模块版本\n  -nowarn                      不生成任何警告\n  -parameters                  生成元数据以用于方法参数的反射\n  -proc:"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("none,only"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("            控制是否执行注释处理和/或编译。\n  -processor "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("class"),e("span",{pre:!0,attrs:{class:"token operator"}},[e("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[a._v("1")]),a._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(","),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("class"),e("span",{pre:!0,attrs:{class:"token operator"}},[e("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[a._v("2")]),a._v(">")]),a._v(","),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("class"),e("span",{pre:!0,attrs:{class:"token operator"}},[e("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[a._v("3")]),a._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("..")]),a._v("."),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" 要运行的注释处理程序的名称"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" 绕过默认的搜索进程\n  --processor-module-path "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("path"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 指定查找注释处理程序的模块路径\n  --processor-path "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("path"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(", -processorpath "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("path"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 指定查找注释处理程序的位置\n  -profile "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("profile"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("           请确保使用的 API 在指定的配置文件中可用\n  --release "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("release"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("          针对特定 VM 版本进行编译。支持的目标: "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("6")]),a._v(", "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("7")]),a._v(", "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),a._v(", "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("9")]),a._v(", "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),a._v(", "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("11")]),a._v("\n  -s "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("directory"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("               指定放置生成的源文件的位置\n  -source "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("release"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("            提供与指定发行版的源兼容性\n  --source-path "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("path"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(", -sourcepath "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("path"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 指定查找输入源文件的位置\n  --system "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("jdk"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">|")]),a._v("none          覆盖系统模块位置\n  -target "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("release"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v("            生成特定 VM 版本的类文件\n  --upgrade-module-path "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v("path"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 覆盖可升级模块位置\n  -verbose                     输出有关编译器正在执行的操作的消息\n  --version, -version          版本信息\n  -Werror                      出现警告时终止编译\n")])])]),e("h2",{attrs:{id:"二、监控应用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、监控应用"}},[a._v("#")]),a._v(" 二、监控应用")]),a._v(" "),e("h3",{attrs:{id:"_1、jps-exe"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、jps-exe"}},[a._v("#")]),a._v(" 1、"),e("strong",[a._v("jps.exe")])]),a._v(" "),e("p",[a._v("JVM Process Status 进程状态工具，列出目标系统的HotSpot JJVM")]),a._v(" "),e("h3",{attrs:{id:"_2、jstat-jvm性能监控"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、jstat-jvm性能监控"}},[a._v("#")]),a._v(" 2、jstat JVM性能监控")]),a._v(" "),e("p",[a._v("JDK自带的一个轻量级小工具，全称“Java Virtual Machine statistics monitoring tool”，主要利用JVM内建的指令对Java应用程序的资源和性能进行实时的命令行的监控，包括了对Heap size和垃圾回收状况的监控。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('C:\\Users\\dong>jstat\nUsage: jstat --help|-options\n       jstat -<option> [-t] [-h<lines>] <vmid> [<interval> [<count>]]\n\nDefinitions:\n  <option>      An option reported by the -options option\n  <vmid>        Virtual Machine Identifier. A vmid takes the following form:\n                     <lvmid>[@<hostname>[:<port>]]\n                Where <lvmid> is the local vm identifier for the target\n                Java virtual machine, typically a process id; <hostname> is\n                the name of the host running the target Java virtual machine;\n                and <port> is the port number for the rmiregistry on the\n                target host. See the jvmstat documentation for a more complete\n                description of the Virtual Machine Identifier.\n  <lines>       Number of samples between header lines.\n  <interval>    Sampling interval. The following forms are allowed:\n                    <n>["ms"|"s"]\n                Where <n> is an integer and the suffix specifies the units as\n                milliseconds("ms") or seconds("s"). The default units are "ms".\n  <count>       Number of samples to take before terminating.\n  -J<flag>      Pass <flag> directly to the runtime system.\n  -? -h --help  Prints this help message.\n  -help         Prints this help message.\n')])])]),e("p",[a._v("其中options支持:")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("C:\\Users\\dong>jstat -options\n-class\n-compiler\n-gc\n-gccapacity\n-gccause\n-gcmetacapacity\n-gcnew\n-gcnewcapacity\n-gcold\n-gcoldcapacity\n-gcutil\n-printcompilation\n")])])]),e("h3",{attrs:{id:"_3、jstatd-exe-jvm-jstat-的守护进程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、jstatd-exe-jvm-jstat-的守护进程"}},[a._v("#")]),a._v(" 3、"),e("strong",[a._v("jstatd.exe")]),a._v("  JVM jstat 的守护进程")]),a._v(" "),e("h3",{attrs:{id:"_4、jhat-堆储存查看器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、jhat-堆储存查看器"}},[a._v("#")]),a._v(" 4、jhat 堆储存查看器")]),a._v(" "),e("p",[a._v('jhat是一个Java heap dump文件浏览器。这个工具分析Java堆复制文件（例如，由上面的 "jmap -dump"所产生的）。Jhat启动一个允许堆中的对象在web浏览器中进行分析的web服务器。这个工具并不是想用于应用系统中而是用于"离线"分 析。“jhat工具是平HIDDEN立的”，其意思是，它可以被用来观察在任何平台上所产生的堆复制。例如，我们有可能在Linux系统上使用jhat来 观察一个在Solaris OS上所产生的堆复制')]),a._v(" "),e("h3",{attrs:{id:"_5、jmap-java内存图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5、jmap-java内存图"}},[a._v("#")]),a._v(" 5、jmap Java内存图")]),a._v(" "),e("p",[a._v("主要用于打印指定Java进程(或核心文件、远程调试服务器)的共享对象内存映射或堆内存细节。")]),a._v(" "),e("p",[a._v("jmap命令可以获得运行中的jvm的堆的快照，从而可以离线分析堆，以检查内存泄漏，检查一些严重影响性能的大对象的创建，检查系统中什么对象最多，各种对象所占内存的大小等等。可以使用jmap生成Heap Dump。")]),a._v(" "),e("p",[a._v("注意：这里的堆是指java进程中的堆，不单单是")]),a._v(" "),e("h3",{attrs:{id:"_6、jstack-java堆栈跟踪"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6、jstack-java堆栈跟踪"}},[a._v("#")]),a._v(" 6、"),e("strong",[a._v("jstack")]),a._v("  Java堆栈跟踪")]),a._v(" "),e("h3",{attrs:{id:"_7、jvisualvm-gui监控工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7、jvisualvm-gui监控工具"}},[a._v("#")]),a._v(" 7、jvisualvm (gui监控工具）")]),a._v(" "),e("p",[a._v("JVM监测、故障排除、分析工具，主要以图形化界面的方式提供运行于指定虚拟机的Java应用程序的详细信息，能够监控线程，内存情况，查看方法的CPU时间和内存中的对 象，已被GC的对象，反向查看分配的堆栈(如100个String对象分别由哪几个对象分配出来的).")]),a._v(" "),e("p",[e("img",{attrs:{src:s(355),alt:"img"}})]),a._v(" "),e("h3",{attrs:{id:"_8、jconsole-gui监控工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8、jconsole-gui监控工具"}},[a._v("#")]),a._v(" 8、jconsole（gui监控工具）")]),a._v(" "),e("p",[a._v("主要用于监测并显示运行于Java平台上的应用程序的性能和资源占用等信息")]),a._v(" "),e("p",[e("img",{attrs:{src:s(356),alt:"img"}})]),a._v(" "),e("h3",{attrs:{id:"_9、jmc-gui工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9、jmc-gui工具"}},[a._v("#")]),a._v(" 9、jmc(gui工具）")]),a._v(" "),e("p",[a._v("Java任务控制工具(Java Mission Control)，主要用于HotSpot JVM的生产时间监测、分析、诊断，数据比jvisualvm数据更加丰富")]),a._v(" "),e("p",[e("img",{attrs:{src:s(357),alt:"img"}})]),a._v(" "),e("h2",{attrs:{id:"三、安全相关的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、安全相关的"}},[a._v("#")]),a._v(" 三、安全相关的")]),a._v(" "),e("h3",{attrs:{id:"_1、policytool-gui工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、policytool-gui工具"}},[a._v("#")]),a._v(" 1、policytool：gui工具")]),a._v(" "),e("h3",{attrs:{id:"_2、keytool-密钥工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、keytool-密钥工具"}},[a._v("#")]),a._v(" 2、keytool：密钥工具")]),a._v(" "),e("h3",{attrs:{id:"_3、kinit-klist-ktab-kerberos管理工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、kinit-klist-ktab-kerberos管理工具"}},[a._v("#")]),a._v(" 3、kinit,klist,ktab：kerberos管理工具")]),a._v(" "),e("h3",{attrs:{id:"_4、jarsigner-签名-签名校验工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、jarsigner-签名-签名校验工具"}},[a._v("#")]),a._v(" 4、jarsigner：签名,签名校验工具")]),a._v(" "),e("h2",{attrs:{id:"四、案列"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、案列"}},[a._v("#")]),a._v(" 四、案列")]),a._v(" "),e("h3",{attrs:{id:"一、一行代码-引发的full-gc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、一行代码-引发的full-gc"}},[a._v("#")]),a._v(" 一、一行代码 引发的FULL GC")]),a._v(" "),e("h3",{attrs:{id:"_1-问题描述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-问题描述"}},[a._v("#")]),a._v(" 1.问题描述")]),a._v(" "),e("p",[a._v("**2021年1月27日运维同事发现线上出生证明服务CPU使用报警，经排查后发下系统一直在FULL GC  **")]),a._v(" "),e("div",{staticClass:"language-tex extra-class"},[e("pre",{pre:!0,attrs:{class:"language-tex"}},[e("code",[a._v("查看服务器gc命令： jstat -gcutil 进程号 时间间隔\n前提是 执行命令的用户权限 >= 启动java进程用户的权限\n")])])]),e("p",[e("img",{attrs:{src:s(358),alt:"img"}})]),a._v(" "),e("p",[a._v("**同时CPU使用率较高  **")]),a._v(" "),e("p",[e("img",{attrs:{src:s(359),alt:"img"}})]),a._v(" "),e("p",[a._v("**同时线上服务器响应时间变长  **")]),a._v(" "),e("p",[e("img",{attrs:{src:s(360),alt:"img"}})]),a._v(" "),e("p",[a._v("**经确认线下没有大规模的活动，没有异常流量进入，排除业务和流量问题后项目组开始排查系统问题  **")]),a._v(" "),e("h3",{attrs:{id:"_2-问题定位"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-问题定位"}},[a._v("#")]),a._v(" 2.问题定位")]),a._v(" "),e("p",[a._v("**系统频繁的FULL GC明显不正常，开始排查是否存在内存泄露的情况  **")]),a._v(" "),e("h4",{attrs:{id:"_1-dump-java进程内存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-dump-java进程内存"}},[a._v("#")]),a._v(" 1）dump java进程内存")]),a._v(" "),e("p",[a._v("使用命令")]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[a._v("jmap -dump:live,format"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("b,file"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("heap-dump.bin 进程号\n")])])]),e("p",[a._v("将java进程内存快照到问题内，通过堡垒机将内存文件下载到本地")]),a._v(" "),e("h4",{attrs:{id:"_2-使用mat对内存进行分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用mat对内存进行分析"}},[a._v("#")]),a._v(" 2）使用MAT对内存进行分析")]),a._v(" "),e("p",[a._v("MAT的解释以及用法请参考： https://juejin.cn/post/6844903782766084103")]),a._v(" "),e("p",[a._v("没有MAT工具的同学可以百度搜索：“MAT”，进入官网下载即可")]),a._v(" "),e("p",[e("img",{attrs:{src:s(361),alt:"img"}})]),a._v(" "),e("p",[a._v("打开MAT后将下载好的文件导入到MAT内")]),a._v(" "),e("p",[e("img",{attrs:{src:s(362),alt:"img"}})]),a._v(" "),e("p",[a._v("导入后发现内存中大对象占比非常大，初步定为存在内存泄露的情况")]),a._v(" "),e("p",[e("img",{attrs:{src:s(363),alt:"img"}})]),a._v(" "),e("p",[a._v("点击 “Leak Suspects （内存泄漏的工具）” 进入内存泄露分析页面")]),a._v(" "),e("p",[e("img",{attrs:{src:s(364),alt:"img"}})]),a._v(" "),e("p",[a._v("进入后发现“PoolingHttpClientConnectionManager”对象实例非常多，内存占用率也达到了96.6%")]),a._v(" "),e("p",[e("img",{attrs:{src:s(365),alt:"img"}})]),a._v(" "),e("p",[a._v("点击“Details”进入详情页面，同时将滚动条拉倒最下，检查线程调用栈信息，发现是阿里云OSS客户端\n存在内存泄露")]),a._v(" "),e("p",[e("img",{attrs:{src:s(366),alt:"img"}})]),a._v(" "),e("p",[a._v("排查代码是否有使用阿里云OSS客户端，经排查后发现在调用图片上传接口时 “"),e("strong",[a._v("没有关闭客户端连接")]),a._v("”")]),a._v(" "),e("p",[e("img",{attrs:{src:s(367),alt:"img"}})])])}),[],!1,null,null,null);t.default=r.exports}}]);