(window.webpackJsonp=window.webpackJsonp||[]).push([[122],{659:function(t,a,e){"use strict";e.r(a);var r=e(42),n=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"三、gradle"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、gradle"}},[t._v("#")]),t._v(" 三、Gradle")]),t._v(" "),e("h2",{attrs:{id:"一、五种依赖方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、五种依赖方式"}},[t._v("#")]),t._v(" 一、五种依赖方式")]),t._v(" "),e("h3",{attrs:{id:"_1、implementation"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、implementation"}},[t._v("#")]),t._v(" 1、implementation")]),t._v(" "),e("p",[t._v("会将指定的依赖添加到编译路径，并且会将该依赖打包到输出，如apk中，但是这个依赖在编译时不能暴露给其他模块，例如依赖此模块的其他模块。这种方式指定的依赖在编译时只能在当前模块中访问。")]),t._v(" "),e("h3",{attrs:{id:"_2、api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、api"}},[t._v("#")]),t._v(" 2、api")]),t._v(" "),e("p",[t._v("使用api配置的依赖会将对应的依赖添加到编译路径，并将依赖打包输出，但是这个依赖是可以传递的，比如模块A依赖模块B，B依赖库C，模块B在编译时能够访问到库C，但是与implemetation不同的是，在模块A中库C也是可以访问的")]),t._v(" "),e("h3",{attrs:{id:"_3、compileonly"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、compileonly"}},[t._v("#")]),t._v(" 3、compileOnly")]),t._v(" "),e("p",[t._v("compileOnly修饰的依赖会添加到编译路径中，但是不会打包到apk中，因此只能在编译时访问，且compileOnly修饰的依赖不会传递")]),t._v(" "),e("h3",{attrs:{id:"_4、runtimeonly"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、runtimeonly"}},[t._v("#")]),t._v(" 4、runtimeOnly")]),t._v(" "),e("p",[t._v("这个与compileOnly相反，它修饰的依赖不会添加到编译路径中，但是被打包到apk中，运行时使用。没有使用过")]),t._v(" "),e("h3",{attrs:{id:"_5、annotationprocessor"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5、annotationprocessor"}},[t._v("#")]),t._v(" 5、annotationProcessor")]),t._v(" "),e("p",[t._v("用于注解处理器的依赖配置，还没有使用过。")]),t._v(" "),e("p",[t._v("除了上面五种，还有两种testImplementation和androidTestImplementation两种，用于指定在测试代码的依赖。")])])}),[],!1,null,null,null);a.default=n.exports}}]);